//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship AttackGraphHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.AttackGraphHasElements.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.AttackGraphHasElements.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ff2a0cb4-089f-4075-b493-318d7766f3cb")]
	public partial class AttackGraphHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AttackGraphHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff2a0cb4, 0x089f, 0x4075, 0xb4, 0x93, 0x31, 0x8d, 0x77, 0x66, 0xf3, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AttackGraphHasElements link in the same Partition as the given AttackGraph
		/// </summary>
		/// <param name="source">AttackGraph to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public AttackGraphHasElements(AttackGraph source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AttackGraphHasElements.AttackGraphDomainRoleId, source), new DslModeling::RoleAssignment(AttackGraphHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttackGraphHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttackGraphHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AttackGraphHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AttackGraphHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AttackGraph domain role code
		
		/// <summary>
		/// AttackGraph domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttackGraphDomainRoleId = new global::System.Guid(0xdea90e84, 0x611c, 0x4724, 0x94, 0x36, 0x1c, 0x52, 0xb0, 0x50, 0x0d, 0xb3);
		
		/// <summary>
		/// DomainRole AttackGraph
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.AttackGraphHasElements/AttackGraph.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.AttackGraphHasElements/AttackGraph.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="JA.Attack.AttackGraphHasElements/AttackGraph.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dea90e84-611c-4724-9436-1c52b0500db3")]
		public virtual AttackGraph AttackGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttackGraph)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttackGraphDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttackGraphDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttackGraph of a FlowElement
		/// <summary>
		/// Gets AttackGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttackGraph GetAttackGraph(FlowElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as AttackGraph;
		}
		
		/// <summary>
		/// Sets AttackGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttackGraph(FlowElement element, AttackGraph newAttackGraph)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newAttackGraph);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x173d1a5f, 0x4035, 0x4477, 0xa9, 0x1e, 0xcc, 0x3b, 0x8b, 0x3c, 0x03, 0xac);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.AttackGraphHasElements/Element.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.AttackGraphHasElements/Element.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AttackGraph", PropertyDisplayNameKey="JA.Attack.AttackGraphHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("173d1a5f-4035-4477-a91e-cc3b8b3c03ac")]
		public virtual FlowElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a AttackGraph
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetElements(AttackGraph element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, AttackGraphDomainRoleId);
		}
		#endregion
		#region AttackGraph link accessor
		/// <summary>
		/// Get the list of AttackGraphHasElements links to a AttackGraph.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.AttackGraphHasElements> GetLinksToElements ( global::JA.Attack.AttackGraph attackGraphInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasElements>(attackGraphInstance, global::JA.Attack.AttackGraphHasElements.AttackGraphDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the AttackGraphHasElements link to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.AttackGraphHasElements GetLinkToAttackGraph (global::JA.Attack.FlowElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Attack.AttackGraphHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasElements>(elementInstance, global::JA.Attack.AttackGraphHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttackGraphHasElements instance accessors
		
		/// <summary>
		/// Get any AttackGraphHasElements links between a given AttackGraph and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.AttackGraphHasElements> GetLinks( global::JA.Attack.AttackGraph source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.AttackGraphHasElements> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.AttackGraphHasElements>();
			global::System.Collections.Generic.IList<global::JA.Attack.AttackGraphHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasElements>(source, global::JA.Attack.AttackGraphHasElements.AttackGraphDomainRoleId);
			foreach ( global::JA.Attack.AttackGraphHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AttackGraphHasElements link between a given AttackGraphand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.AttackGraphHasElements GetLink( global::JA.Attack.AttackGraph source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.AttackGraphHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.AttackGraphHasElements>(source, global::JA.Attack.AttackGraphHasElements.AttackGraphDomainRoleId);
			foreach ( global::JA.Attack.AttackGraphHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship TaskHasPreConditions
	/// Description for JA.Attack.TaskHasPreConditions
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.TaskHasPreConditions.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.TaskHasPreConditions.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("38daab5e-519d-412e-a98b-b4d0439f2b76")]
	public partial class TaskHasPreConditions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TaskHasPreConditions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38daab5e, 0x519d, 0x412e, 0xa9, 0x8b, 0xb4, 0xd0, 0x43, 0x9f, 0x2b, 0x76);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TaskHasPreConditions link in the same Partition as the given Task
		/// </summary>
		/// <param name="source">Task to use as the source of the relationship.</param>
		/// <param name="target">PreCondition to use as the target of the relationship.</param>
		public TaskHasPreConditions(Task source, PreCondition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TaskHasPreConditions.TaskDomainRoleId, source), new DslModeling::RoleAssignment(TaskHasPreConditions.PreConditionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TaskHasPreConditions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TaskHasPreConditions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TaskHasPreConditions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TaskHasPreConditions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Task domain role code
		
		/// <summary>
		/// Task domain role Id.
		/// </summary>
		public static readonly global::System.Guid TaskDomainRoleId = new global::System.Guid(0x8e2b7181, 0xe846, 0x419d, 0xa4, 0xd4, 0x3e, 0x99, 0xe9, 0x86, 0x97, 0xe8);
		
		/// <summary>
		/// DomainRole Task
		/// Description for JA.Attack.TaskHasPreConditions.Task
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.TaskHasPreConditions/Task.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.TaskHasPreConditions/Task.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PreConditions", PropertyDisplayNameKey="JA.Attack.TaskHasPreConditions/Task.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8e2b7181-e846-419d-a4d4-3e99e98697e8")]
		public virtual Task Task
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Task)DslModeling::DomainRoleInfo.GetRolePlayer(this, TaskDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TaskDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Task of a PreCondition
		/// <summary>
		/// Gets Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Task GetTask(PreCondition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PreConditionDomainRoleId) as Task;
		}
		
		/// <summary>
		/// Sets Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTask(PreCondition element, Task newTask)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PreConditionDomainRoleId, newTask);
		}
		#endregion
		#region PreCondition domain role code
		
		/// <summary>
		/// PreCondition domain role Id.
		/// </summary>
		public static readonly global::System.Guid PreConditionDomainRoleId = new global::System.Guid(0xd12b7179, 0x014d, 0x4956, 0x96, 0x92, 0xe3, 0x79, 0x00, 0x40, 0x3e, 0xa9);
		
		/// <summary>
		/// DomainRole PreCondition
		/// Description for JA.Attack.TaskHasPreConditions.PreCondition
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.TaskHasPreConditions/PreCondition.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.TaskHasPreConditions/PreCondition.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Task", PropertyDisplayNameKey="JA.Attack.TaskHasPreConditions/PreCondition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d12b7179-014d-4956-9692-e37900403ea9")]
		public virtual PreCondition PreCondition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PreCondition)DslModeling::DomainRoleInfo.GetRolePlayer(this, PreConditionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PreConditionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreConditions of a Task
		/// <summary>
		/// Gets a list of PreConditions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PreCondition> GetPreConditions(Task element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PreCondition>, PreCondition>(element, TaskDomainRoleId);
		}
		#endregion
		#region Task link accessor
		/// <summary>
		/// Get the list of TaskHasPreConditions links to a Task.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.TaskHasPreConditions> GetLinksToPreConditions ( global::JA.Attack.Task taskInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(taskInstance, global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId);
		}
		#endregion
		#region PreCondition link accessor
		/// <summary>
		/// Get the TaskHasPreConditions link to a PreCondition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.TaskHasPreConditions GetLinkToTask (global::JA.Attack.PreCondition preConditionInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Attack.TaskHasPreConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(preConditionInstance, global::JA.Attack.TaskHasPreConditions.PreConditionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PreCondition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TaskHasPreConditions instance accessors
		
		/// <summary>
		/// Get any TaskHasPreConditions links between a given Task and a PreCondition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.TaskHasPreConditions> GetLinks( global::JA.Attack.Task source, global::JA.Attack.PreCondition target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.TaskHasPreConditions> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.TaskHasPreConditions>();
			global::System.Collections.Generic.IList<global::JA.Attack.TaskHasPreConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(source, global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId);
			foreach ( global::JA.Attack.TaskHasPreConditions link in links )
			{
				if ( target.Equals(link.PreCondition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TaskHasPreConditions link between a given Taskand a PreCondition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.TaskHasPreConditions GetLink( global::JA.Attack.Task source, global::JA.Attack.PreCondition target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.TaskHasPreConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.TaskHasPreConditions>(source, global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId);
			foreach ( global::JA.Attack.TaskHasPreConditions link in links )
			{
				if ( target.Equals(link.PreCondition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship StateHasPostConditions
	/// Description for JA.Attack.StateHasPostConditions
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.StateHasPostConditions.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.StateHasPostConditions.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fb580b34-d783-4ff0-9565-d5ea5a05d3d8")]
	public partial class StateHasPostConditions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasPostConditions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb580b34, 0xd783, 0x4ff0, 0x95, 0x65, 0xd5, 0xea, 0x5a, 0x05, 0xd3, 0xd8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasPostConditions link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">PostCondition to use as the target of the relationship.</param>
		public StateHasPostConditions(State source, PostCondition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasPostConditions.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasPostConditions.PostConditionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasPostConditions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasPostConditions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasPostConditions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasPostConditions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x74e4c13f, 0x5520, 0x4fd1, 0x8f, 0x6d, 0xc7, 0x19, 0x7f, 0xdc, 0x87, 0xea);
		
		/// <summary>
		/// DomainRole State
		/// Description for JA.Attack.StateHasPostConditions.State
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.StateHasPostConditions/State.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.StateHasPostConditions/State.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PostConditions", PropertyDisplayNameKey="JA.Attack.StateHasPostConditions/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("74e4c13f-5520-4fd1-8f6d-c7197fdc87ea")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a PostCondition
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(PostCondition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PostConditionDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(PostCondition element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PostConditionDomainRoleId, newState);
		}
		#endregion
		#region PostCondition domain role code
		
		/// <summary>
		/// PostCondition domain role Id.
		/// </summary>
		public static readonly global::System.Guid PostConditionDomainRoleId = new global::System.Guid(0x0239a672, 0x5e66, 0x4615, 0x9e, 0xa4, 0xa1, 0xae, 0xb9, 0x30, 0x57, 0x54);
		
		/// <summary>
		/// DomainRole PostCondition
		/// Description for JA.Attack.StateHasPostConditions.PostCondition
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.StateHasPostConditions/PostCondition.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.StateHasPostConditions/PostCondition.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="JA.Attack.StateHasPostConditions/PostCondition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0239a672-5e66-4615-9ea4-a1aeb9305754")]
		public virtual PostCondition PostCondition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PostCondition)DslModeling::DomainRoleInfo.GetRolePlayer(this, PostConditionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PostConditionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PostConditions of a State
		/// <summary>
		/// Gets a list of PostConditions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PostCondition> GetPostConditions(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PostCondition>, PostCondition>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasPostConditions links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.StateHasPostConditions> GetLinksToPostConditions ( global::JA.Attack.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(stateInstance, global::JA.Attack.StateHasPostConditions.StateDomainRoleId);
		}
		#endregion
		#region PostCondition link accessor
		/// <summary>
		/// Get the StateHasPostConditions link to a PostCondition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.StateHasPostConditions GetLinkToState (global::JA.Attack.PostCondition postConditionInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Attack.StateHasPostConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(postConditionInstance, global::JA.Attack.StateHasPostConditions.PostConditionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PostCondition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasPostConditions instance accessors
		
		/// <summary>
		/// Get any StateHasPostConditions links between a given State and a PostCondition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.StateHasPostConditions> GetLinks( global::JA.Attack.State source, global::JA.Attack.PostCondition target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.StateHasPostConditions> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.StateHasPostConditions>();
			global::System.Collections.Generic.IList<global::JA.Attack.StateHasPostConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(source, global::JA.Attack.StateHasPostConditions.StateDomainRoleId);
			foreach ( global::JA.Attack.StateHasPostConditions link in links )
			{
				if ( target.Equals(link.PostCondition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasPostConditions link between a given Stateand a PostCondition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.StateHasPostConditions GetLink( global::JA.Attack.State source, global::JA.Attack.PostCondition target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.StateHasPostConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.StateHasPostConditions>(source, global::JA.Attack.StateHasPostConditions.StateDomainRoleId);
			foreach ( global::JA.Attack.StateHasPostConditions link in links )
			{
				if ( target.Equals(link.PostCondition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainRelationship FlowRelationship
	/// Description for JA.Attack.FlowRelationship
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.FlowRelationship.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.FlowRelationship.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d78b04e7-dfef-4469-8f7f-70ede2f9493f")]
	public partial class FlowRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd78b04e7, 0xdfef, 0x4469, 0x8f, 0x7f, 0x70, 0xed, 0xe2, 0xf9, 0x49, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowRelationship link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public FlowRelationship(FlowElement source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowRelationship.SourceFlowElementDomainRoleId, source), new DslModeling::RoleAssignment(FlowRelationship.TargetFlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceFlowElement domain role code
		
		/// <summary>
		/// SourceFlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceFlowElementDomainRoleId = new global::System.Guid(0x301771d8, 0x8b40, 0x4f9e, 0xa2, 0x55, 0xff, 0x1f, 0xfb, 0x5d, 0x8d, 0xc9);
		
		/// <summary>
		/// DomainRole SourceFlowElement
		/// Description for JA.Attack.FlowRelationship.SourceFlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.FlowRelationship/SourceFlowElement.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.FlowRelationship/SourceFlowElement.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetFlowElements", PropertyDisplayNameKey="JA.Attack.FlowRelationship/SourceFlowElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("301771d8-8b40-4f9e-a255-ff1ffb5d8dc9")]
		public virtual FlowElement SourceFlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceFlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceFlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceFlowElements of a FlowElement
		/// <summary>
		/// Gets a list of SourceFlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetSourceFlowElements(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, TargetFlowElementDomainRoleId);
		}
		#endregion
		#region TargetFlowElement domain role code
		
		/// <summary>
		/// TargetFlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetFlowElementDomainRoleId = new global::System.Guid(0xa502e47d, 0xb6b9, 0x4a33, 0x80, 0x3a, 0xeb, 0xf4, 0xf8, 0x85, 0x1c, 0xaa);
		
		/// <summary>
		/// DomainRole TargetFlowElement
		/// Description for JA.Attack.FlowRelationship.TargetFlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.FlowRelationship/TargetFlowElement.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.FlowRelationship/TargetFlowElement.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceFlowElements", PropertyDisplayNameKey="JA.Attack.FlowRelationship/TargetFlowElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a502e47d-b6b9-4a33-803a-ebf4f8851caa")]
		public virtual FlowElement TargetFlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetFlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetFlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetFlowElements of a FlowElement
		/// <summary>
		/// Gets a list of TargetFlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetTargetFlowElements(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, SourceFlowElementDomainRoleId);
		}
		#endregion
		#region SourceFlowElement link accessor
		/// <summary>
		/// Get the list of FlowRelationship links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.FlowRelationship> GetLinksToTargetFlowElements ( global::JA.Attack.FlowElement sourceFlowElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.FlowRelationship>(sourceFlowElementInstance, global::JA.Attack.FlowRelationship.SourceFlowElementDomainRoleId);
		}
		#endregion
		#region TargetFlowElement link accessor
		/// <summary>
		/// Get the list of FlowRelationship links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.FlowRelationship> GetLinksToSourceFlowElements ( global::JA.Attack.FlowElement targetFlowElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.FlowRelationship>(targetFlowElementInstance, global::JA.Attack.FlowRelationship.TargetFlowElementDomainRoleId);
		}
		#endregion
		#region FlowRelationship instance accessors
		
		/// <summary>
		/// Get any FlowRelationship links between a given FlowElement and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Attack.FlowRelationship> GetLinks( global::JA.Attack.FlowElement source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.List<global::JA.Attack.FlowRelationship> outLinks = new global::System.Collections.Generic.List<global::JA.Attack.FlowRelationship>();
			global::System.Collections.Generic.IList<global::JA.Attack.FlowRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.FlowRelationship>(source, global::JA.Attack.FlowRelationship.SourceFlowElementDomainRoleId);
			foreach ( global::JA.Attack.FlowRelationship link in links )
			{
				if ( target.Equals(link.TargetFlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowRelationship link between a given FlowElementand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Attack.FlowRelationship GetLink( global::JA.Attack.FlowElement source, global::JA.Attack.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::JA.Attack.FlowRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Attack.FlowRelationship>(source, global::JA.Attack.FlowRelationship.SourceFlowElementDomainRoleId);
			foreach ( global::JA.Attack.FlowRelationship link in links )
			{
				if ( target.Equals(link.TargetFlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
