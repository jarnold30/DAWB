//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace JA.Attack
{
	/// <summary>
	/// DomainClass AttackGraph
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.AttackGraph.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.AttackGraph.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9169ce08-68e8-4537-a2ae-e5047096c743")]
	public partial class AttackGraph : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AttackGraph domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9169ce08, 0x68e8, 0x4537, 0xa2, 0xae, 0xe5, 0x04, 0x70, 0x96, 0xc7, 0x43);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AttackGraph(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AttackGraph(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::JA.Attack.AttackGraphHasElements.AttackGraphDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Attack.FlowElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::JA.Attack.FlowElement sourceFlowElement1 = sourceElement as global::JA.Attack.FlowElement;
			if (sourceFlowElement1 != null)
			{
				// Create link for path AttackGraphHasElements.Elements
				this.Elements.Add(sourceFlowElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::JA.Attack.FlowElement sourceFlowElement1 = sourceElement as global::JA.Attack.FlowElement;
			if (sourceFlowElement1 != null)
			{
				// Delete link for path AttackGraphHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::JA.Attack.AttackGraphHasElements.GetLinks((global::JA.Attack.AttackGraph)this, sourceFlowElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Attack.AttackGraphHasElements.AttackGraphDomainRoleId, global::JA.Attack.AttackGraphHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass FlowElement
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.FlowElement.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.FlowElement.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0015f537-1b99-4d14-8af9-77c7d560ac79")]
	public abstract partial class FlowElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FlowElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0015f537, 0x1b99, 0x4d14, 0x8a, 0xf9, 0x77, 0xc7, 0xd5, 0x60, 0xac, 0x79);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FlowElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AttackGraph opposite domain role accessor
		/// <summary>
		/// Gets or sets AttackGraph.
		/// </summary>
		public virtual AttackGraph AttackGraph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Attack.AttackGraphHasElements.ElementDomainRoleId) as AttackGraph;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Attack.AttackGraphHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region TargetFlowElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetFlowElements.
		/// Description for JA.Attack.FlowRelationship.SourceFlowElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> TargetFlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::JA.Attack.FlowRelationship.SourceFlowElementDomainRoleId);
			}
		}
		#endregion
		#region SourceFlowElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceFlowElements.
		/// Description for JA.Attack.FlowRelationship.TargetFlowElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> SourceFlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::JA.Attack.FlowRelationship.TargetFlowElementDomainRoleId);
			}
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass Synchronisation
	/// Description for JA.Attack.Synchronisation
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.Synchronisation.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.Synchronisation.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2521d3ca-5ac9-478f-9241-2571b828e58e")]
	public partial class Synchronisation : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Synchronisation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2521d3ca, 0x5ac9, 0x478f, 0x92, 0x41, 0x25, 0x71, 0xb8, 0x28, 0xe5, 0x8e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronisation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronisation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass StartPoint
	/// Description for JA.Attack.StartPoint
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.StartPoint.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.StartPoint.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c15eb944-2543-4423-81ad-63116d429019")]
	public partial class StartPoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StartPoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc15eb944, 0x2543, 0x4423, 0x81, 0xad, 0x63, 0x11, 0x6d, 0x42, 0x90, 0x19);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass EndPoint
	/// Description for JA.Attack.EndPoint
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.EndPoint.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.EndPoint.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("97233ffa-5d78-44c0-a7ec-d47376b93677")]
	public partial class EndPoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EndPoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x97233ffa, 0x5d78, 0x44c0, 0xa7, 0xec, 0xd4, 0x73, 0x76, 0xb9, 0x36, 0x77);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndPoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndPoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass MergeBranch
	/// Description for JA.Attack.MergeBranch
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.MergeBranch.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.MergeBranch.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("60cdf59d-778f-4acd-b006-0336e39ce8ad")]
	public partial class MergeBranch : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MergeBranch domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60cdf59d, 0x778f, 0x4acd, 0xb0, 0x06, 0x03, 0x36, 0xe3, 0x9c, 0xe8, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MergeBranch(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MergeBranch(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass Task
	/// Description for JA.Attack.Task
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.Task.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.Task.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("369f91e0-d2f6-4e86-a7bb-f7d6a3bb6813")]
	public partial class Task : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Task domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x369f91e0, 0xd2f6, 0x4e86, 0xa7, 0xbb, 0xf7, 0xd6, 0xa3, 0xbb, 0x68, 0x13);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Task(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Task(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PreConditions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PreConditions.
		/// Description for JA.Attack.TaskHasPreConditions.Task
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PreCondition> PreConditions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PreCondition>, PreCondition>(global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Attack.PreCondition.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::JA.Attack.PreCondition sourcePreCondition1 = sourceElement as global::JA.Attack.PreCondition;
			if (sourcePreCondition1 != null)
			{
				// Create link for path TaskHasPreConditions.PreConditions
				this.PreConditions.Add(sourcePreCondition1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::JA.Attack.PreCondition sourcePreCondition1 = sourceElement as global::JA.Attack.PreCondition;
			if (sourcePreCondition1 != null)
			{
				// Delete link for path TaskHasPreConditions.PreConditions
				
				foreach (DslModeling::ElementLink link in global::JA.Attack.TaskHasPreConditions.GetLinks((global::JA.Attack.Task)this, sourcePreCondition1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Attack.TaskHasPreConditions.TaskDomainRoleId, global::JA.Attack.TaskHasPreConditions.PreConditionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass State
	/// Description for JA.Attack.State
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.State.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.State.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4a83155a-879c-4c77-8289-78da25ff67df")]
	public partial class State : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// State domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a83155a, 0x879c, 0x4c77, 0x82, 0x89, 0x78, 0xda, 0x25, 0xff, 0x67, 0xdf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PostConditions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PostConditions.
		/// Description for JA.Attack.StateHasPostConditions.State
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PostCondition> PostConditions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PostCondition>, PostCondition>(global::JA.Attack.StateHasPostConditions.StateDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Attack.PostCondition.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::JA.Attack.PostCondition sourcePostCondition1 = sourceElement as global::JA.Attack.PostCondition;
			if (sourcePostCondition1 != null)
			{
				// Create link for path StateHasPostConditions.PostConditions
				this.PostConditions.Add(sourcePostCondition1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::JA.Attack.PostCondition sourcePostCondition1 = sourceElement as global::JA.Attack.PostCondition;
			if (sourcePostCondition1 != null)
			{
				// Delete link for path StateHasPostConditions.PostConditions
				
				foreach (DslModeling::ElementLink link in global::JA.Attack.StateHasPostConditions.GetLinks((global::JA.Attack.State)this, sourcePostCondition1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Attack.StateHasPostConditions.StateDomainRoleId, global::JA.Attack.StateHasPostConditions.PostConditionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass NamedElement
	/// Description for JA.Attack.NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.NamedElement.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.NamedElement.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("581fe8a9-3915-4702-8f55-160ce5753588")]
	public partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x581fe8a9, 0x3915, 0x4702, 0x8f, 0x55, 0x16, 0x0c, 0xe5, 0x75, 0x35, 0x88);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NamedElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NamedElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x27ee9785, 0x9171, 0x4fbf, 0x84, 0x66, 0xf9, 0x3f, 0x35, 0x51, 0x86, 0xb0);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for JA.Attack.NamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Attack.NamedElement/Name.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Attack.NamedElement/Name.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("27ee9785-9171-4fbf-8466-f93f355186b0")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass Condition
	/// Description for JA.Attack.Condition
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.Condition.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.Condition.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4a7dd5cc-0d82-431a-9081-42695b1b726d")]
	public partial class Condition : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Condition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a7dd5cc, 0x0d82, 0x431a, 0x90, 0x81, 0x42, 0x69, 0x5b, 0x1b, 0x72, 0x6d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Condition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Condition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass PreCondition
	/// Description for JA.Attack.PreCondition
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.PreCondition.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.PreCondition.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("492be2bb-e6ae-43f4-9e53-c142977c963e")]
	public partial class PreCondition : Condition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PreCondition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x492be2bb, 0xe6ae, 0x43f4, 0x9e, 0x53, 0xc1, 0x42, 0x97, 0x7c, 0x96, 0x3e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PreCondition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PreCondition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Task opposite domain role accessor
		/// <summary>
		/// Gets or sets Task.
		/// Description for JA.Attack.TaskHasPreConditions.PreCondition
		/// </summary>
		public virtual Task Task
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Attack.TaskHasPreConditions.PreConditionDomainRoleId) as Task;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Attack.TaskHasPreConditions.PreConditionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace JA.Attack
{
	/// <summary>
	/// DomainClass PostCondition
	/// Description for JA.Attack.PostCondition
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Attack.PostCondition.DisplayName", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Attack.PostCondition.Description", typeof(global::JA.Attack.AttackDomainModel), "JA.Attack.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Attack.AttackDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("13d05d8d-a143-45e7-a8dc-aeb517cc7e8b")]
	public partial class PostCondition : Condition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PostCondition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13d05d8d, 0xa143, 0x45e7, 0xa8, 0xdc, 0xae, 0xb5, 0x17, 0xcc, 0x7e, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PostCondition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PostCondition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region State opposite domain role accessor
		/// <summary>
		/// Gets or sets State.
		/// Description for JA.Attack.StateHasPostConditions.PostCondition
		/// </summary>
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Attack.StateHasPostConditions.PostConditionDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Attack.StateHasPostConditions.PostConditionDomainRoleId, value);
			}
		}
		#endregion
	}
}
