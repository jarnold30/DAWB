//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "JA.Risk.RiskDiagram")]

namespace JA.Risk
{
	/// <summary>
	/// DomainClass RiskDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskDiagram.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskDiagram.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("84dfe933-9d52-41cd-982f-ca14293a514d")]
	public partial class RiskDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::JA.Risk.RiskToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Port shape support
		/// <summary>
		/// Indicates whether the diagram contains any ports.  Hit testing will not
		/// check for ports if this is false.
		/// </summary>
		public override bool SupportsPorts
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
			if (!subscribedCompartmentItemsEvents && this.Store != null)
			{
				subscribedCompartmentItemsEvents = true;
				this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
			}
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
			if (subscribedCompartmentItemsEvents)
			{
				this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
				subscribedCompartmentItemsEvents = false;
			}
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
			// If in Undo, Redo or Rollback the compartment item rules are not run so we must refresh the compartment list at this point if required
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemAddRule.ElementAdded(e, repaintOnly);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemDeleteRule.ElementDeleted(e, repaintOnly);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemChangeRule.ElementPropertyChanged(e, repaintOnly);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
			bool repaintOnly = !e.ElementLink.Store.InUndoRedoOrRollback;
			CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, repaintOnly);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
			bool repaintOnly = !e.Link.Store.InUndoRedoOrRollback;
			CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, repaintOnly);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::JA.Risk.ThreatAgent)
			{
				global::JA.Risk.ThreatAgentCompartmentShape newShape = new global::JA.Risk.ThreatAgentCompartmentShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::JA.Risk.Container)
			{
				global::JA.Risk.ContainerCompartmentShape newShape = new global::JA.Risk.ContainerCompartmentShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::JA.Risk.Asset)
			{
				global::JA.Risk.AssetCompartmentShape newShape = new global::JA.Risk.AssetCompartmentShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::JA.Risk.Port)
			{
				global::JA.Risk.PortShape newShape = new global::JA.Risk.PortShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::JA.Risk.Generalization)
			{
				global::JA.Risk.GeneralizationLink newShape = new global::JA.Risk.GeneralizationLink(this.Partition);
				return newShape;
			}
			if(element is global::JA.Risk.Interaction)
			{
				global::JA.Risk.InteractsLink newShape = new global::JA.Risk.InteractsLink(this.Partition);
				return newShape;
			}
			if(element is global::JA.Risk.Contains)
			{
				global::JA.Risk.ContainsLink newShape = new global::JA.Risk.ContainsLink(this.Partition);
				return newShape;
			}
			if(element is global::JA.Risk.ContainerReferencesAssets)
			{
				global::JA.Risk.ContainsAsset newShape = new global::JA.Risk.ContainsAsset(this.Partition);
				return newShape;
			}
			if(element is global::JA.Risk.LegitimateAccess)
			{
				global::JA.Risk.LegitimateAccessConnector newShape = new global::JA.Risk.LegitimateAccessConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::JA.Risk.ThreatAgentCompartmentShape.DecoratorsInitialized += ThreatAgentCompartmentShapeDecoratorMap.OnDecoratorsInitialized;
			global::JA.Risk.AssetCompartmentShape.DecoratorsInitialized += AssetCompartmentShapeDecoratorMap.OnDecoratorsInitialized;
			global::JA.Risk.ContainerCompartmentShape.DecoratorsInitialized += ContainerCompartmentShapeDecoratorMap.OnDecoratorsInitialized;
			global::JA.Risk.PortShape.DecoratorsInitialized += PortShapeDecoratorMap.OnDecoratorsInitialized;
			global::JA.Risk.InteractsLink.DecoratorsInitialized += InteractsLinkDecoratorMap.OnDecoratorsInitialized;
			global::JA.Risk.ContainsLink.DecoratorsInitialized += ContainsLinkDecoratorMap.OnDecoratorsInitialized;
			global::JA.Risk.LegitimateAccessConnector.DecoratorsInitialized += LegitimateAccessConnectorDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ThreatAgentCompartmentShape.
		/// </summary>
		internal static partial class ThreatAgentCompartmentShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ThreatAgentCompartmentShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.ThreatAgent.NumberDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Number").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AssetCompartmentShape.
		/// </summary>
		internal static partial class AssetCompartmentShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AssetCompartmentShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.Asset.NumberDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Number").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ContainerCompartmentShape.
		/// </summary>
		internal static partial class ContainerCompartmentShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ContainerCompartmentShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.Container.TypeDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Type").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for PortShape.
		/// </summary>
		internal static partial class PortShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for PortShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for InteractsLink.
		/// </summary>
		internal static partial class InteractsLinkDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for InteractsLink.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.Interaction.AttackDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Attack").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ContainsLink.
		/// </summary>
		internal static partial class ContainsLinkDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ContainsLink.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.Contains.AttackDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Attack").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.Contains.NumberDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Number").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for LegitimateAccessConnector.
		/// </summary>
		internal static partial class LegitimateAccessConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for LegitimateAccessConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::JA.Risk.LegitimateAccess.ConditionsDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Conditions").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::JA.Risk.GeneralizationConnectAction generalizationConnectAction;
		private global::JA.Risk.InteractionConnectAction interactionConnectAction;
		private global::JA.Risk.ContainsConnectAction containsConnectAction;
		private global::JA.Risk.ContainsAssetConnectAction containsAssetConnectAction;
		private global::JA.Risk.LegitimateAccessConnectAction legitimateAccessConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::JA.Risk.RiskToolboxHelper.GeneralizationFilterString))
				{
					if (this.generalizationConnectAction == null)
					{
						this.generalizationConnectAction = new global::JA.Risk.GeneralizationConnectAction(this);
						this.generalizationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.generalizationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::JA.Risk.RiskToolboxHelper.InteractionFilterString))
				{
					if (this.interactionConnectAction == null)
					{
						this.interactionConnectAction = new global::JA.Risk.InteractionConnectAction(this);
						this.interactionConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.interactionConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::JA.Risk.RiskToolboxHelper.ContainsFilterString))
				{
					if (this.containsConnectAction == null)
					{
						this.containsConnectAction = new global::JA.Risk.ContainsConnectAction(this);
						this.containsConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.containsConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::JA.Risk.RiskToolboxHelper.ContainsAssetFilterString))
				{
					if (this.containsAssetConnectAction == null)
					{
						this.containsAssetConnectAction = new global::JA.Risk.ContainsAssetConnectAction(this);
						this.containsAssetConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.containsAssetConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::JA.Risk.RiskToolboxHelper.LegitimateAccessFilterString))
				{
					if (this.legitimateAccessConnectAction == null)
					{
						this.legitimateAccessConnectAction = new global::JA.Risk.LegitimateAccessConnectAction(this);
						this.legitimateAccessConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.legitimateAccessConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.generalizationConnectAction != null)
					{
						this.generalizationConnectAction.Dispose();
						this.generalizationConnectAction = null;
					}
					if(this.interactionConnectAction != null)
					{
						this.interactionConnectAction.Dispose();
						this.interactionConnectAction = null;
					}
					if(this.containsConnectAction != null)
					{
						this.containsConnectAction.Dispose();
						this.containsConnectAction = null;
					}
					if(this.containsAssetConnectAction != null)
					{
						this.containsAssetConnectAction.Dispose();
						this.containsAssetConnectAction = null;
					}
					if(this.legitimateAccessConnectAction != null)
					{
						this.legitimateAccessConnectAction.Dispose();
						this.legitimateAccessConnectAction = null;
					}
					this.UnsubscribeCompartmentItemsEvents();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// RiskDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84dfe933, 0x9d52, 0x41cd, 0x98, 0x2f, 0xca, 0x14, 0x29, 0x3a, 0x51, 0x4d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RiskDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RiskDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace JA.Risk
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.ThreatAgent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Container), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Asset), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Port), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority + 1, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Interaction), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Contains), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.ContainerReferencesAssets), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.LegitimateAccess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::JA.Risk.ThreatAgent)
				{
					parentElement = GetParentForThreatAgent((global::JA.Risk.ThreatAgent)childElement);
				} else
				if(childElement is global::JA.Risk.Container)
				{
					parentElement = GetParentForContainer((global::JA.Risk.Container)childElement);
				} else
				if(childElement is global::JA.Risk.Asset)
				{
					parentElement = GetParentForAsset((global::JA.Risk.Asset)childElement);
				} else
				if(childElement is global::JA.Risk.Port)
				{
					parentElement = GetParentForPort((global::JA.Risk.Port)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::JA.Risk.RiskModel GetParentForThreatAgent( global::JA.Risk.ThreatAgent root )
			{
				// Segments 0 and 1
				global::JA.Risk.RiskModel result = root.RiskModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::JA.Risk.RiskModel GetParentForAsset( global::JA.Risk.Asset root )
			{
				// Segments 0 and 1
				global::JA.Risk.RiskModel result = root.RiskModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::JA.Risk.RiskModel GetParentForContainer( global::JA.Risk.Container root )
			{
				// Segments 0 and 1
				global::JA.Risk.RiskModel result = root.RiskModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::JA.Risk.ObjectWithPorts GetParentForPort( global::JA.Risk.Port root )
			{
				// Segments 0 and 1
				global::JA.Risk.ObjectWithPorts result = root.ObjectWithPorts;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
		/// <summary>
		/// Rule to update compartments when an item is added to the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.ObjectWithConditionsHasConditions), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemAddRule : DslModeling::AddRule
		{
			/// <summary>
			/// Called when an element is added. 
			/// </summary>
			/// <param name="e"></param>
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				ElementAdded(e, false);
			}
	
			internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if (e.ModelElement.IsDeleted)
					return;
				if(e.ModelElement is global::JA.Risk.ObjectWithConditionsHasConditions)
				{
					global::System.Collections.IEnumerable elements = GetThreatAgentForThreatAgentCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ModelElement);
					UpdateCompartments(elements, typeof(global::JA.Risk.ThreatAgentCompartmentShape), "Conditions", repaintOnly);
				}
				if(e.ModelElement is global::JA.Risk.ObjectWithConditionsHasConditions)
				{
					global::System.Collections.IEnumerable elements = GetAssetForAssetCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ModelElement);
					UpdateCompartments(elements, typeof(global::JA.Risk.AssetCompartmentShape), "Conditions", repaintOnly);
				}
				if(e.ModelElement is global::JA.Risk.ObjectWithConditionsHasConditions)
				{
					global::System.Collections.IEnumerable elements = GetContainerForContainerCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ModelElement);
					UpdateCompartments(elements, typeof(global::JA.Risk.ContainerCompartmentShape), "Conditions", repaintOnly);
				}
			}
			
			#region static DomainPath traversal methods to get the list of compartments to update
			internal static global::System.Collections.ICollection GetThreatAgentForThreatAgentCompartmentShapeConditionsFromLastLink(global::JA.Risk.ObjectWithConditionsHasConditions root)
			{
				// Segment 0
				global::JA.Risk.ObjectWithConditions result = root.ObjectWithConditions;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetThreatAgentForThreatAgentCompartmentShapeConditions(global::JA.Risk.Condition root)
			{
				// Segments 1 and 0
				global::JA.Risk.ObjectWithConditions result = root.ObjectWithConditions;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetAssetForAssetCompartmentShapeConditionsFromLastLink(global::JA.Risk.ObjectWithConditionsHasConditions root)
			{
				// Segment 0
				global::JA.Risk.ObjectWithConditions result = root.ObjectWithConditions;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetAssetForAssetCompartmentShapeConditions(global::JA.Risk.Condition root)
			{
				// Segments 1 and 0
				global::JA.Risk.ObjectWithConditions result = root.ObjectWithConditions;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetContainerForContainerCompartmentShapeConditionsFromLastLink(global::JA.Risk.ObjectWithConditionsHasConditions root)
			{
				// Segment 0
				global::JA.Risk.ObjectWithConditions result = root.ObjectWithConditions;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetContainerForContainerCompartmentShapeConditions(global::JA.Risk.Condition root)
			{
				// Segments 1 and 0
				global::JA.Risk.ObjectWithConditions result = root.ObjectWithConditions;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			#endregion
	
			#region helper method to update compartments 
			/// <summary>
			/// Updates the compartments for the shapes associated to the given list of model elements
			/// </summary>
			/// <param name="elements">List of model elements</param>
			/// <param name="shapeType">The type of shape that needs updating</param>
			/// <param name="compartmentName">The name of the compartment to update</param>
			/// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
			internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly)
			{
				foreach (DslModeling::ModelElement element in elements)
				{
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
					foreach (DslDiagrams::PresentationElement pel in pels)
					{
						DslDiagrams::CompartmentShape compartmentShape = pel as DslDiagrams::CompartmentShape;
						if (compartmentShape != null && shapeType.IsAssignableFrom(compartmentShape.GetType()))
						{
							if (repaintOnly)
							{
								compartmentShape.Invalidate();
							}
							else
							{
								foreach(DslDiagrams::CompartmentMapping mapping in compartmentShape.GetCompartmentMappings())
								{
									if(mapping.CompartmentId==compartmentName)
									{
										mapping.InitializeCompartmentShape(compartmentShape);
										break;
									}
								}
							}
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Rule to update compartments when an items is removed from the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.ObjectWithConditionsHasConditions), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
		{
			/// <summary>
			/// Called when an element is deleted
			/// </summary>
			/// <param name="e"></param>
			public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
			{
				ElementDeleted(e, false);
			}
			
			internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::JA.Risk.ObjectWithConditionsHasConditions)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetThreatAgentForThreatAgentCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ThreatAgentCompartmentShape), "Conditions", repaintOnly);
				}
				if(e.ModelElement is global::JA.Risk.ObjectWithConditionsHasConditions)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetAssetForAssetCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.AssetCompartmentShape), "Conditions", repaintOnly);
				}
				if(e.ModelElement is global::JA.Risk.ObjectWithConditionsHasConditions)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetContainerForContainerCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ContainerCompartmentShape), "Conditions", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when the property on an item being displayed changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.Condition), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
		{
			/// <summary>
			/// Called when an element is changed
			/// </summary>
			/// <param name="e"></param>
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				ElementPropertyChanged(e, false);
			}
			
			internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::JA.Risk.Condition && e.DomainProperty.Id == global::JA.Risk.Condition.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetThreatAgentForThreatAgentCompartmentShapeConditions((global::JA.Risk.Condition)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ThreatAgentCompartmentShape), "Conditions", repaintOnly);
				}
				if(e.ModelElement is global::JA.Risk.Condition && e.DomainProperty.Id == global::JA.Risk.Condition.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAssetForAssetCompartmentShapeConditions((global::JA.Risk.Condition)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.AssetCompartmentShape), "Conditions", repaintOnly);
				}
				if(e.ModelElement is global::JA.Risk.Condition && e.DomainProperty.Id == global::JA.Risk.Condition.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetContainerForContainerCompartmentShapeConditions((global::JA.Risk.Condition)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ContainerCompartmentShape), "Conditions", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when a roleplayer change happens
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.ObjectWithConditionsHasConditions), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
		{
			/// <summary>
			/// Called when the roleplayer on a link changes.
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				RolePlayerChanged(e, false);
			}
			
			internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::JA.Risk.ObjectWithConditionsHasConditions).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetThreatAgentForThreatAgentCompartmentShapeConditionsFromLastLink((global::JA.Risk.Condition)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::JA.Risk.ThreatAgentCompartmentShape compartmentShape = pel as global::JA.Risk.ThreatAgentCompartmentShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetThreatAgentForThreatAgentCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ThreatAgentCompartmentShape), "Conditions", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetThreatAgentForThreatAgentCompartmentShapeConditions((global::JA.Risk.Condition)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ThreatAgentCompartmentShape), "Conditions", repaintOnly);
					}
				}
				if(typeof(global::JA.Risk.ObjectWithConditionsHasConditions).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetAssetForAssetCompartmentShapeConditionsFromLastLink((global::JA.Risk.Condition)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::JA.Risk.AssetCompartmentShape compartmentShape = pel as global::JA.Risk.AssetCompartmentShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAssetForAssetCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.AssetCompartmentShape), "Conditions", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAssetForAssetCompartmentShapeConditions((global::JA.Risk.Condition)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.AssetCompartmentShape), "Conditions", repaintOnly);
					}
				}
				if(typeof(global::JA.Risk.ObjectWithConditionsHasConditions).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetContainerForContainerCompartmentShapeConditionsFromLastLink((global::JA.Risk.Condition)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::JA.Risk.ContainerCompartmentShape compartmentShape = pel as global::JA.Risk.ContainerCompartmentShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetContainerForContainerCompartmentShapeConditionsFromLastLink((global::JA.Risk.ObjectWithConditionsHasConditions)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ContainerCompartmentShape), "Conditions", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetContainerForContainerCompartmentShapeConditions((global::JA.Risk.Condition)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ContainerCompartmentShape), "Conditions", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Rule to update compartments when the order of items in the list changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.ObjectWithConditionsHasConditions), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
		{
			/// <summary>
			/// Called when the order of a roleplayer in a relationship changes
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
			{
				RolePlayerPositionChanged(e, false);
			}
			
			internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::JA.Risk.ObjectWithConditionsHasConditions).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetThreatAgentForThreatAgentCompartmentShapeConditions((global::JA.Risk.Condition)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ThreatAgentCompartmentShape), "Conditions", repaintOnly);
					}
				}
				if(typeof(global::JA.Risk.ObjectWithConditionsHasConditions).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetAssetForAssetCompartmentShapeConditions((global::JA.Risk.Condition)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.AssetCompartmentShape), "Conditions", repaintOnly);
					}
				}
				if(typeof(global::JA.Risk.ObjectWithConditionsHasConditions).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetContainerForContainerCompartmentShapeConditions((global::JA.Risk.Condition)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::JA.Risk.ContainerCompartmentShape), "Conditions", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.NamedElement), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Interaction), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Contains), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.LegitimateAccess), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::JA.Risk.NamedElement.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::JA.Risk.PortShape.FindPortShapeDecorator("Name");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::JA.Risk.Port.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::JA.Risk.Interaction.AttackDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::JA.Risk.InteractsLink.FindInteractsLinkDecorator("Attack");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::JA.Risk.Interaction.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::JA.Risk.Contains.AttackDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::JA.Risk.ContainsLink.FindContainsLinkDecorator("Attack");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::JA.Risk.Contains.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::JA.Risk.Contains.NumberDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::JA.Risk.ContainsLink.FindContainsLinkDecorator("Number");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::JA.Risk.Contains.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::JA.Risk.LegitimateAccess.ConditionsDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::JA.Risk.LegitimateAccessConnector.FindLegitimateAccessConnectorDecorator("Conditions");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::JA.Risk.LegitimateAccess.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::JA.Risk.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Interaction), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.Contains), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.ContainerReferencesAssets), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::JA.Risk.LegitimateAccess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::JA.Risk.RiskDiagram diagram = linkShape.Diagram as global::JA.Risk.RiskDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
