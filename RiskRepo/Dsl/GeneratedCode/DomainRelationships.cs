//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship RiskModelHasContainers
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("38aa0a41-4dc9-4a81-ab8b-1f71302601ac")]
	public partial class RiskModelHasContainers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RiskModelHasContainers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38aa0a41, 0x4dc9, 0x4a81, 0xab, 0x8b, 0x1f, 0x71, 0x30, 0x26, 0x01, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RiskModelHasContainers link in the same Partition as the given RiskModel
		/// </summary>
		/// <param name="source">RiskModel to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public RiskModelHasContainers(RiskModel source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RiskModelHasContainers.RiskModelDomainRoleId, source), new DslModeling::RoleAssignment(RiskModelHasContainers.ContainerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasContainers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasContainers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasContainers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasContainers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RiskModel domain role code
		
		/// <summary>
		/// RiskModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RiskModelDomainRoleId = new global::System.Guid(0xf35d74fc, 0xe9a3, 0x4cc2, 0xb3, 0x44, 0xcf, 0x08, 0xb7, 0xcd, 0x5a, 0x33);
		
		/// <summary>
		/// DomainRole RiskModel
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers/RiskModel.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers/RiskModel.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Containers", PropertyDisplayNameKey="JA.Risk.RiskModelHasContainers/RiskModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f35d74fc-e9a3-4cc2-b344-cf08b7cd5a33")]
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RiskModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RiskModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RiskModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RiskModel of a Container
		/// <summary>
		/// Gets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RiskModel GetRiskModel(Container element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ContainerDomainRoleId) as RiskModel;
		}
		
		/// <summary>
		/// Sets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRiskModel(Container element, RiskModel newRiskModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ContainerDomainRoleId, newRiskModel);
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0x69d32f76, 0xbd09, 0x493d, 0xb6, 0x4a, 0x6d, 0x54, 0x45, 0x16, 0x07, 0xaa);
		
		/// <summary>
		/// DomainRole Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RiskModel", PropertyDisplayNameKey="JA.Risk.RiskModelHasContainers/Container.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("69d32f76-bd09-493d-b64a-6d54451607aa")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Containers of a RiskModel
		/// <summary>
		/// Gets a list of Containers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetContainers(RiskModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, RiskModelDomainRoleId);
		}
		#endregion
		#region RiskModel link accessor
		/// <summary>
		/// Get the list of RiskModelHasContainers links to a RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasContainers> GetLinksToContainers ( global::JA.Risk.RiskModel riskModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(riskModelInstance, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the RiskModelHasContainers link to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasContainers GetLinkToRiskModel (global::JA.Risk.Container containerInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(containerInstance, global::JA.Risk.RiskModelHasContainers.ContainerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Container not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RiskModelHasContainers instance accessors
		
		/// <summary>
		/// Get any RiskModelHasContainers links between a given RiskModel and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasContainers> GetLinks( global::JA.Risk.RiskModel source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasContainers> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasContainers>();
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(source, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasContainers link in links )
			{
				if ( target.Equals(link.Container) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RiskModelHasContainers link between a given RiskModeland a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasContainers GetLink( global::JA.Risk.RiskModel source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(source, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasContainers link in links )
			{
				if ( target.Equals(link.Container) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship Generalization
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Generalization.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Generalization.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d3f5f36b-85f6-467b-9d59-c9a432c5d0ef")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd3f5f36b, 0x85f6, 0x467b, 0x9d, 0x59, 0xc9, 0xa4, 0x32, 0xc5, 0xd0, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public Generalization(Container source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0xae3526b0, 0x20d6, 0x46dd, 0x9b, 0x36, 0x38, 0x96, 0x0a, 0x68, 0xae, 0xe4);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Generalization/Superclass.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Generalization/Superclass.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="JA.Risk.Generalization/Superclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae3526b0-20d6-46dd-9b36-38960a68aee4")]
		public virtual Container Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a Container
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetSuperclass(Container element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(Container element, Container newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0xe1d115ba, 0x809a, 0x46ab, 0xa0, 0xf9, 0x52, 0x79, 0x2a, 0x12, 0x86, 0xc0);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Generalization/Subclass.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Generalization/Subclass.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="JA.Risk.Generalization/Subclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e1d115ba-809a-46ab-a0f9-52792a1286c0")]
		public virtual Container Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a Container
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetSubclasses(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Generalization> GetLinksToSubclasses ( global::JA.Risk.Container superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(superclassInstance, global::JA.Risk.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Generalization GetLinkToSuperclass (global::JA.Risk.Container subclassInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(subclassInstance, global::JA.Risk.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given Container and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Generalization> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.Generalization> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.Generalization>();
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(source, global::JA.Risk.Generalization.SuperclassDomainRoleId);
			foreach ( global::JA.Risk.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given Containerand a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Generalization GetLink( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(source, global::JA.Risk.Generalization.SuperclassDomainRoleId);
			foreach ( global::JA.Risk.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship Interaction
	/// Description for JA.Risk.Interaction
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Interaction.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Interaction.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("ddc2e9e0-da0d-41da-b6f1-709345d0737c")]
	public partial class Interaction : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Interaction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xddc2e9e0, 0xda0d, 0x41da, 0xb6, 0xf1, 0x70, 0x93, 0x45, 0xd0, 0x73, 0x7c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Interaction link in the same Partition as the given Port
		/// </summary>
		/// <param name="source">Port to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public Interaction(Port source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Interaction.SourcePortDomainRoleId, source), new DslModeling::RoleAssignment(Interaction.TargetPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Interaction(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Interaction(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Interaction(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Interaction(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourcePort domain role code
		
		/// <summary>
		/// SourcePort domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourcePortDomainRoleId = new global::System.Guid(0x8ada8518, 0x418f, 0x45ad, 0x9f, 0x27, 0xe6, 0x93, 0x20, 0x48, 0x3e, 0x47);
		
		/// <summary>
		/// DomainRole SourcePort
		/// Description for JA.Risk.Interaction.SourcePort
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Interaction/SourcePort.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Interaction/SourcePort.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetPort", PropertyDisplayNameKey="JA.Risk.Interaction/SourcePort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8ada8518-418f-45ad-9f27-e69320483e47")]
		public virtual Port SourcePort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourcePortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourcePortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourcePort of a Port
		/// <summary>
		/// Gets a list of SourcePort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetSourcePort(Port element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, TargetPortDomainRoleId);
		}
		#endregion
		#region TargetPort domain role code
		
		/// <summary>
		/// TargetPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetPortDomainRoleId = new global::System.Guid(0x279cfe6d, 0x0a18, 0x4abf, 0xaf, 0xb9, 0x04, 0x1c, 0xa3, 0x35, 0x45, 0xa3);
		
		/// <summary>
		/// DomainRole TargetPort
		/// Description for JA.Risk.Interaction.TargetPort
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Interaction/TargetPort.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Interaction/TargetPort.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourcePort", PropertyDisplayNameKey="JA.Risk.Interaction/TargetPort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("279cfe6d-0a18-4abf-afb9-041ca33545a3")]
		public virtual Port TargetPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetPort of a Port
		/// <summary>
		/// Gets a list of TargetPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetTargetPort(Port element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, SourcePortDomainRoleId);
		}
		#endregion
		#region Attack domain property code
		
		/// <summary>
		/// Attack domain property Id.
		/// </summary>
		public static readonly global::System.Guid AttackDomainPropertyId = new global::System.Guid(0xb92f1c8b, 0xaf20, 0x4535, 0x8f, 0x1b, 0xc6, 0xfa, 0x08, 0xeb, 0x4b, 0x57);
		
		/// <summary>
		/// Storage for Attack
		/// </summary>
		private global::System.String attackPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Attack domain property.
		/// Description for JA.Risk.Interaction.Attack
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Interaction/Attack.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Interaction/Attack.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b92f1c8b-af20-4535-8f1b-c6fa08eb4b57")]
		public global::System.String Attack
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return attackPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AttackPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Interaction.Attack domain property.
		/// </summary>
		internal sealed partial class AttackPropertyHandler : DslModeling::DomainPropertyValueHandler<Interaction, global::System.String>
		{
			private AttackPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Interaction.Attack domain property value handler.
			/// </summary>
			public static readonly AttackPropertyHandler Instance = new AttackPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Interaction.Attack domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AttackDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Interaction element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.attackPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Interaction element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.attackPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourcePort link accessor
		/// <summary>
		/// Get the list of Interaction links to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Interaction> GetLinksToTargetPort ( global::JA.Risk.Port sourcePortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Interaction>(sourcePortInstance, global::JA.Risk.Interaction.SourcePortDomainRoleId);
		}
		#endregion
		#region TargetPort link accessor
		/// <summary>
		/// Get the list of Interaction links to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Interaction> GetLinksToSourcePort ( global::JA.Risk.Port targetPortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Interaction>(targetPortInstance, global::JA.Risk.Interaction.TargetPortDomainRoleId);
		}
		#endregion
		#region Interaction instance accessors
		
		/// <summary>
		/// Get any Interaction links between a given Port and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Interaction> GetLinks( global::JA.Risk.Port source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.Interaction> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.Interaction>();
			global::System.Collections.Generic.IList<global::JA.Risk.Interaction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Interaction>(source, global::JA.Risk.Interaction.SourcePortDomainRoleId);
			foreach ( global::JA.Risk.Interaction link in links )
			{
				if ( target.Equals(link.TargetPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship Contains
	/// Description for JA.Risk.Contains
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Contains.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Contains.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("48911222-c25b-409b-b5be-86345561a3f1")]
	public partial class Contains : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Contains domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48911222, 0xc25b, 0x409b, 0xb5, 0xbe, 0x86, 0x34, 0x55, 0x61, 0xa3, 0xf1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Contains link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public Contains(Container source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Contains.SourceContainerDomainRoleId, source), new DslModeling::RoleAssignment(Contains.TargetContainerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Contains(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Contains(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Contains(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Contains(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceContainer domain role code
		
		/// <summary>
		/// SourceContainer domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceContainerDomainRoleId = new global::System.Guid(0x08ee4421, 0xb90f, 0x44e3, 0xac, 0x07, 0x40, 0xdf, 0x44, 0xd4, 0x99, 0x93);
		
		/// <summary>
		/// DomainRole SourceContainer
		/// Description for JA.Risk.Contains.SourceContainer
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Contains/SourceContainer.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Contains/SourceContainer.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetContainers", PropertyDisplayNameKey="JA.Risk.Contains/SourceContainer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("08ee4421-b90f-44e3-ac07-40df44d49993")]
		public virtual Container SourceContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceContainers of a Container
		/// <summary>
		/// Gets a list of SourceContainers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetSourceContainers(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, TargetContainerDomainRoleId);
		}
		#endregion
		#region TargetContainer domain role code
		
		/// <summary>
		/// TargetContainer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetContainerDomainRoleId = new global::System.Guid(0xbe2a2a49, 0xe692, 0x4b51, 0xbc, 0x50, 0x21, 0x17, 0x57, 0x9b, 0xd5, 0x3a);
		
		/// <summary>
		/// DomainRole TargetContainer
		/// Description for JA.Risk.Contains.TargetContainer
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Contains/TargetContainer.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Contains/TargetContainer.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceContainers", PropertyDisplayNameKey="JA.Risk.Contains/TargetContainer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("be2a2a49-e692-4b51-bc50-2117579bd53a")]
		public virtual Container TargetContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetContainers of a Container
		/// <summary>
		/// Gets a list of TargetContainers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetTargetContainers(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, SourceContainerDomainRoleId);
		}
		#endregion
		#region Number domain property code
		
		/// <summary>
		/// Number domain property Id.
		/// </summary>
		public static readonly global::System.Guid NumberDomainPropertyId = new global::System.Guid(0xfd9bfec8, 0xebcd, 0x4cf0, 0x8b, 0x64, 0x5e, 0x05, 0x4e, 0xb4, 0xb2, 0x37);
		
		/// <summary>
		/// Storage for Number
		/// </summary>
		private global::System.String numberPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Number domain property.
		/// Description for JA.Risk.Contains.Number
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Contains/Number.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Contains/Number.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fd9bfec8-ebcd-4cf0-8b64-5e054eb4b237")]
		public global::System.String Number
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return numberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NumberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Contains.Number domain property.
		/// </summary>
		internal sealed partial class NumberPropertyHandler : DslModeling::DomainPropertyValueHandler<Contains, global::System.String>
		{
			private NumberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Contains.Number domain property value handler.
			/// </summary>
			public static readonly NumberPropertyHandler Instance = new NumberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Contains.Number domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NumberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Contains element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.numberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Contains element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.numberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Attack domain property code
		
		/// <summary>
		/// Attack domain property Id.
		/// </summary>
		public static readonly global::System.Guid AttackDomainPropertyId = new global::System.Guid(0x8a0f87d1, 0x5bde, 0x47c3, 0xa8, 0x14, 0x24, 0x54, 0x78, 0xcf, 0xad, 0x87);
		
		/// <summary>
		/// Storage for Attack
		/// </summary>
		private global::System.String attackPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Attack domain property.
		/// Description for JA.Risk.Contains.Attack
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Contains/Attack.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Contains/Attack.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8a0f87d1-5bde-47c3-a814-245478cfad87")]
		public global::System.String Attack
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return attackPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AttackPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Contains.Attack domain property.
		/// </summary>
		internal sealed partial class AttackPropertyHandler : DslModeling::DomainPropertyValueHandler<Contains, global::System.String>
		{
			private AttackPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Contains.Attack domain property value handler.
			/// </summary>
			public static readonly AttackPropertyHandler Instance = new AttackPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Contains.Attack domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AttackDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Contains element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.attackPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Contains element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.attackPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceContainer link accessor
		/// <summary>
		/// Get the list of Contains links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Contains> GetLinksToTargetContainers ( global::JA.Risk.Container sourceContainerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(sourceContainerInstance, global::JA.Risk.Contains.SourceContainerDomainRoleId);
		}
		#endregion
		#region TargetContainer link accessor
		/// <summary>
		/// Get the list of Contains links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Contains> GetLinksToSourceContainers ( global::JA.Risk.Container targetContainerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(targetContainerInstance, global::JA.Risk.Contains.TargetContainerDomainRoleId);
		}
		#endregion
		#region Contains instance accessors
		
		/// <summary>
		/// Get any Contains links between a given Container and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Contains> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.Contains> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.Contains>();
			global::System.Collections.Generic.IList<global::JA.Risk.Contains> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(source, global::JA.Risk.Contains.SourceContainerDomainRoleId);
			foreach ( global::JA.Risk.Contains link in links )
			{
				if ( target.Equals(link.TargetContainer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Contains link between a given Containerand a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Contains GetLink( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Contains> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(source, global::JA.Risk.Contains.SourceContainerDomainRoleId);
			foreach ( global::JA.Risk.Contains link in links )
			{
				if ( target.Equals(link.TargetContainer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ContainerReferencesAssets
	/// Description for JA.Risk.ContainerReferencesAssets
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ContainerReferencesAssets.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ContainerReferencesAssets.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e2017b0f-12ee-44eb-967d-3489b095eae3")]
	public partial class ContainerReferencesAssets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContainerReferencesAssets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2017b0f, 0x12ee, 0x44eb, 0x96, 0x7d, 0x34, 0x89, 0xb0, 0x95, 0xea, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContainerReferencesAssets link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Asset to use as the target of the relationship.</param>
		public ContainerReferencesAssets(Container source, Asset target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContainerReferencesAssets.ContainerDomainRoleId, source), new DslModeling::RoleAssignment(ContainerReferencesAssets.AssetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerReferencesAssets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerReferencesAssets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerReferencesAssets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerReferencesAssets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0x5b33c8c9, 0xb0c8, 0x40ae, 0xb8, 0x77, 0x59, 0x92, 0xc0, 0x39, 0x99, 0xd1);
		
		/// <summary>
		/// DomainRole Container
		/// Description for JA.Risk.ContainerReferencesAssets.Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerReferencesAssets/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerReferencesAssets/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Assets", PropertyDisplayNameKey="JA.Risk.ContainerReferencesAssets/Container.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5b33c8c9-b0c8-40ae-b877-5992c03999d1")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Containers of a Asset
		/// <summary>
		/// Gets a list of Containers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetContainers(Asset element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, AssetDomainRoleId);
		}
		#endregion
		#region Asset domain role code
		
		/// <summary>
		/// Asset domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssetDomainRoleId = new global::System.Guid(0xcc9aaefb, 0x0a2e, 0x429e, 0xae, 0xf4, 0x8b, 0xb9, 0xad, 0xbf, 0x0a, 0x86);
		
		/// <summary>
		/// DomainRole Asset
		/// Description for JA.Risk.ContainerReferencesAssets.Asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerReferencesAssets/Asset.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerReferencesAssets/Asset.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Containers", PropertyDisplayNameKey="JA.Risk.ContainerReferencesAssets/Asset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc9aaefb-0a2e-429e-aef4-8bb9adbf0a86")]
		public virtual Asset Asset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Asset)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Assets of a Container
		/// <summary>
		/// Gets a list of Assets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Asset> GetAssets(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(element, ContainerDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the list of ContainerReferencesAssets links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerReferencesAssets> GetLinksToAssets ( global::JA.Risk.Container containerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerReferencesAssets>(containerInstance, global::JA.Risk.ContainerReferencesAssets.ContainerDomainRoleId);
		}
		#endregion
		#region Asset link accessor
		/// <summary>
		/// Get the list of ContainerReferencesAssets links to a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerReferencesAssets> GetLinksToContainers ( global::JA.Risk.Asset assetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerReferencesAssets>(assetInstance, global::JA.Risk.ContainerReferencesAssets.AssetDomainRoleId);
		}
		#endregion
		#region ContainerReferencesAssets instance accessors
		
		/// <summary>
		/// Get any ContainerReferencesAssets links between a given Container and a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerReferencesAssets> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ContainerReferencesAssets> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ContainerReferencesAssets>();
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerReferencesAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerReferencesAssets>(source, global::JA.Risk.ContainerReferencesAssets.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerReferencesAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContainerReferencesAssets link between a given Containerand a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerReferencesAssets GetLink( global::JA.Risk.Container source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerReferencesAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerReferencesAssets>(source, global::JA.Risk.ContainerReferencesAssets.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerReferencesAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship RiskModelHasAssets
	/// Description for JA.Risk.RiskModelHasAssets
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasAssets.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskModelHasAssets.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0d29d0ac-33df-4654-b0be-5a0f43a34f01")]
	public partial class RiskModelHasAssets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RiskModelHasAssets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d29d0ac, 0x33df, 0x4654, 0xb0, 0xbe, 0x5a, 0x0f, 0x43, 0xa3, 0x4f, 0x01);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RiskModelHasAssets link in the same Partition as the given RiskModel
		/// </summary>
		/// <param name="source">RiskModel to use as the source of the relationship.</param>
		/// <param name="target">Asset to use as the target of the relationship.</param>
		public RiskModelHasAssets(RiskModel source, Asset target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RiskModelHasAssets.RiskModelDomainRoleId, source), new DslModeling::RoleAssignment(RiskModelHasAssets.AssetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasAssets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasAssets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasAssets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasAssets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RiskModel domain role code
		
		/// <summary>
		/// RiskModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RiskModelDomainRoleId = new global::System.Guid(0x83159399, 0x665d, 0x4316, 0xae, 0xdb, 0x87, 0x50, 0x2b, 0x0a, 0x19, 0x4f);
		
		/// <summary>
		/// DomainRole RiskModel
		/// Description for JA.Risk.RiskModelHasAssets.RiskModel
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasAssets/RiskModel.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasAssets/RiskModel.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Assets", PropertyDisplayNameKey="JA.Risk.RiskModelHasAssets/RiskModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("83159399-665d-4316-aedb-87502b0a194f")]
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RiskModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RiskModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RiskModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RiskModel of a Asset
		/// <summary>
		/// Gets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RiskModel GetRiskModel(Asset element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssetDomainRoleId) as RiskModel;
		}
		
		/// <summary>
		/// Sets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRiskModel(Asset element, RiskModel newRiskModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssetDomainRoleId, newRiskModel);
		}
		#endregion
		#region Asset domain role code
		
		/// <summary>
		/// Asset domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssetDomainRoleId = new global::System.Guid(0x436cea02, 0x82ee, 0x4db0, 0x92, 0x1d, 0x21, 0xe7, 0x4d, 0xf0, 0xc1, 0x60);
		
		/// <summary>
		/// DomainRole Asset
		/// Description for JA.Risk.RiskModelHasAssets.Asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasAssets/Asset.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasAssets/Asset.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RiskModel", PropertyDisplayNameKey="JA.Risk.RiskModelHasAssets/Asset.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("436cea02-82ee-4db0-921d-21e74df0c160")]
		public virtual Asset Asset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Asset)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Assets of a RiskModel
		/// <summary>
		/// Gets a list of Assets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Asset> GetAssets(RiskModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(element, RiskModelDomainRoleId);
		}
		#endregion
		#region RiskModel link accessor
		/// <summary>
		/// Get the list of RiskModelHasAssets links to a RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasAssets> GetLinksToAssets ( global::JA.Risk.RiskModel riskModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasAssets>(riskModelInstance, global::JA.Risk.RiskModelHasAssets.RiskModelDomainRoleId);
		}
		#endregion
		#region Asset link accessor
		/// <summary>
		/// Get the RiskModelHasAssets link to a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasAssets GetLinkToRiskModel (global::JA.Risk.Asset assetInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasAssets>(assetInstance, global::JA.Risk.RiskModelHasAssets.AssetDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Asset not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RiskModelHasAssets instance accessors
		
		/// <summary>
		/// Get any RiskModelHasAssets links between a given RiskModel and a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasAssets> GetLinks( global::JA.Risk.RiskModel source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasAssets> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasAssets>();
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasAssets>(source, global::JA.Risk.RiskModelHasAssets.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RiskModelHasAssets link between a given RiskModeland a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasAssets GetLink( global::JA.Risk.RiskModel source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasAssets>(source, global::JA.Risk.RiskModelHasAssets.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship RiskModelHasThreatAgents
	/// Description for JA.Risk.RiskModelHasThreatAgents
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasThreatAgents.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskModelHasThreatAgents.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("83f718e4-be81-4fa9-af1a-681f8ae5a035")]
	public partial class RiskModelHasThreatAgents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RiskModelHasThreatAgents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x83f718e4, 0xbe81, 0x4fa9, 0xaf, 0x1a, 0x68, 0x1f, 0x8a, 0xe5, 0xa0, 0x35);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RiskModelHasThreatAgents link in the same Partition as the given RiskModel
		/// </summary>
		/// <param name="source">RiskModel to use as the source of the relationship.</param>
		/// <param name="target">ThreatAgent to use as the target of the relationship.</param>
		public RiskModelHasThreatAgents(RiskModel source, ThreatAgent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RiskModelHasThreatAgents.RiskModelDomainRoleId, source), new DslModeling::RoleAssignment(RiskModelHasThreatAgents.ThreatAgentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasThreatAgents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasThreatAgents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasThreatAgents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasThreatAgents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RiskModel domain role code
		
		/// <summary>
		/// RiskModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RiskModelDomainRoleId = new global::System.Guid(0x7ba599b0, 0x8402, 0x4c91, 0x89, 0x1e, 0x5b, 0xfe, 0x59, 0xf0, 0x81, 0x23);
		
		/// <summary>
		/// DomainRole RiskModel
		/// Description for JA.Risk.RiskModelHasThreatAgents.RiskModel
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasThreatAgents/RiskModel.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasThreatAgents/RiskModel.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ThreatAgents", PropertyDisplayNameKey="JA.Risk.RiskModelHasThreatAgents/RiskModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7ba599b0-8402-4c91-891e-5bfe59f08123")]
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RiskModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RiskModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RiskModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RiskModel of a ThreatAgent
		/// <summary>
		/// Gets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RiskModel GetRiskModel(ThreatAgent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ThreatAgentDomainRoleId) as RiskModel;
		}
		
		/// <summary>
		/// Sets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRiskModel(ThreatAgent element, RiskModel newRiskModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ThreatAgentDomainRoleId, newRiskModel);
		}
		#endregion
		#region ThreatAgent domain role code
		
		/// <summary>
		/// ThreatAgent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ThreatAgentDomainRoleId = new global::System.Guid(0xc91778f2, 0xaa94, 0x4c5c, 0xaf, 0x7f, 0x10, 0xe4, 0x37, 0xd5, 0xcb, 0x8e);
		
		/// <summary>
		/// DomainRole ThreatAgent
		/// Description for JA.Risk.RiskModelHasThreatAgents.ThreatAgent
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasThreatAgents/ThreatAgent.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasThreatAgents/ThreatAgent.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RiskModel", PropertyDisplayNameKey="JA.Risk.RiskModelHasThreatAgents/ThreatAgent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c91778f2-aa94-4c5c-af7f-10e437d5cb8e")]
		public virtual ThreatAgent ThreatAgent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ThreatAgent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ThreatAgentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ThreatAgentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ThreatAgents of a RiskModel
		/// <summary>
		/// Gets a list of ThreatAgents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ThreatAgent> GetThreatAgents(RiskModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ThreatAgent>, ThreatAgent>(element, RiskModelDomainRoleId);
		}
		#endregion
		#region RiskModel link accessor
		/// <summary>
		/// Get the list of RiskModelHasThreatAgents links to a RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasThreatAgents> GetLinksToThreatAgents ( global::JA.Risk.RiskModel riskModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasThreatAgents>(riskModelInstance, global::JA.Risk.RiskModelHasThreatAgents.RiskModelDomainRoleId);
		}
		#endregion
		#region ThreatAgent link accessor
		/// <summary>
		/// Get the RiskModelHasThreatAgents link to a ThreatAgent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasThreatAgents GetLinkToRiskModel (global::JA.Risk.ThreatAgent threatAgentInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasThreatAgents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasThreatAgents>(threatAgentInstance, global::JA.Risk.RiskModelHasThreatAgents.ThreatAgentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ThreatAgent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RiskModelHasThreatAgents instance accessors
		
		/// <summary>
		/// Get any RiskModelHasThreatAgents links between a given RiskModel and a ThreatAgent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasThreatAgents> GetLinks( global::JA.Risk.RiskModel source, global::JA.Risk.ThreatAgent target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasThreatAgents> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasThreatAgents>();
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasThreatAgents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasThreatAgents>(source, global::JA.Risk.RiskModelHasThreatAgents.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasThreatAgents link in links )
			{
				if ( target.Equals(link.ThreatAgent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RiskModelHasThreatAgents link between a given RiskModeland a ThreatAgent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasThreatAgents GetLink( global::JA.Risk.RiskModel source, global::JA.Risk.ThreatAgent target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasThreatAgents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasThreatAgents>(source, global::JA.Risk.RiskModelHasThreatAgents.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasThreatAgents link in links )
			{
				if ( target.Equals(link.ThreatAgent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ObjectWithConditionsHasConditions
	/// Description for JA.Risk.ObjectWithConditionsHasConditions
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ObjectWithConditionsHasConditions.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ObjectWithConditionsHasConditions.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e0e13669-9581-486b-96d0-1128b63d1816")]
	public partial class ObjectWithConditionsHasConditions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectWithConditionsHasConditions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0e13669, 0x9581, 0x486b, 0x96, 0xd0, 0x11, 0x28, 0xb6, 0x3d, 0x18, 0x16);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectWithConditionsHasConditions link in the same Partition as the given ObjectWithConditions
		/// </summary>
		/// <param name="source">ObjectWithConditions to use as the source of the relationship.</param>
		/// <param name="target">Condition to use as the target of the relationship.</param>
		public ObjectWithConditionsHasConditions(ObjectWithConditions source, Condition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectWithConditionsHasConditions.ObjectWithConditionsDomainRoleId, source), new DslModeling::RoleAssignment(ObjectWithConditionsHasConditions.ConditionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectWithConditionsHasConditions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectWithConditionsHasConditions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectWithConditionsHasConditions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectWithConditionsHasConditions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectWithConditions domain role code
		
		/// <summary>
		/// ObjectWithConditions domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectWithConditionsDomainRoleId = new global::System.Guid(0xc1f7da96, 0x5e17, 0x495b, 0x85, 0xa4, 0x64, 0x8f, 0x84, 0x3f, 0x8f, 0xd6);
		
		/// <summary>
		/// DomainRole ObjectWithConditions
		/// Description for JA.Risk.ObjectWithConditionsHasConditions.ObjectWithConditions
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ObjectWithConditionsHasConditions/ObjectWithConditions.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ObjectWithConditionsHasConditions/ObjectWithConditions.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Conditions", PropertyDisplayNameKey="JA.Risk.ObjectWithConditionsHasConditions/ObjectWithConditions.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c1f7da96-5e17-495b-85a4-648f843f8fd6")]
		public virtual ObjectWithConditions ObjectWithConditions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectWithConditions)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectWithConditionsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectWithConditionsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectWithConditions of a Condition
		/// <summary>
		/// Gets ObjectWithConditions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectWithConditions GetObjectWithConditions(Condition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConditionDomainRoleId) as ObjectWithConditions;
		}
		
		/// <summary>
		/// Sets ObjectWithConditions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectWithConditions(Condition element, ObjectWithConditions newObjectWithConditions)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConditionDomainRoleId, newObjectWithConditions);
		}
		#endregion
		#region Condition domain role code
		
		/// <summary>
		/// Condition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConditionDomainRoleId = new global::System.Guid(0x68bcc33f, 0xdf0e, 0x4bfd, 0x9f, 0xf6, 0x5c, 0xf3, 0x6a, 0xf7, 0xcc, 0x55);
		
		/// <summary>
		/// DomainRole Condition
		/// Description for JA.Risk.ObjectWithConditionsHasConditions.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ObjectWithConditionsHasConditions/Condition.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ObjectWithConditionsHasConditions/Condition.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectWithConditions", PropertyDisplayNameKey="JA.Risk.ObjectWithConditionsHasConditions/Condition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("68bcc33f-df0e-4bfd-9ff6-5cf36af7cc55")]
		public virtual Condition Condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Condition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConditionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConditionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Conditions of a ObjectWithConditions
		/// <summary>
		/// Gets a list of Conditions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Condition> GetConditions(ObjectWithConditions element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Condition>, Condition>(element, ObjectWithConditionsDomainRoleId);
		}
		#endregion
		#region ObjectWithConditions link accessor
		/// <summary>
		/// Get the list of ObjectWithConditionsHasConditions links to a ObjectWithConditions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ObjectWithConditionsHasConditions> GetLinksToConditions ( global::JA.Risk.ObjectWithConditions objectWithConditionsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectWithConditionsHasConditions>(objectWithConditionsInstance, global::JA.Risk.ObjectWithConditionsHasConditions.ObjectWithConditionsDomainRoleId);
		}
		#endregion
		#region Condition link accessor
		/// <summary>
		/// Get the ObjectWithConditionsHasConditions link to a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ObjectWithConditionsHasConditions GetLinkToObjectWithConditions (global::JA.Risk.Condition conditionInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ObjectWithConditionsHasConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectWithConditionsHasConditions>(conditionInstance, global::JA.Risk.ObjectWithConditionsHasConditions.ConditionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Condition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectWithConditionsHasConditions instance accessors
		
		/// <summary>
		/// Get any ObjectWithConditionsHasConditions links between a given ObjectWithConditions and a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ObjectWithConditionsHasConditions> GetLinks( global::JA.Risk.ObjectWithConditions source, global::JA.Risk.Condition target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ObjectWithConditionsHasConditions> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ObjectWithConditionsHasConditions>();
			global::System.Collections.Generic.IList<global::JA.Risk.ObjectWithConditionsHasConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectWithConditionsHasConditions>(source, global::JA.Risk.ObjectWithConditionsHasConditions.ObjectWithConditionsDomainRoleId);
			foreach ( global::JA.Risk.ObjectWithConditionsHasConditions link in links )
			{
				if ( target.Equals(link.Condition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectWithConditionsHasConditions link between a given ObjectWithConditionsand a Condition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ObjectWithConditionsHasConditions GetLink( global::JA.Risk.ObjectWithConditions source, global::JA.Risk.Condition target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ObjectWithConditionsHasConditions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectWithConditionsHasConditions>(source, global::JA.Risk.ObjectWithConditionsHasConditions.ObjectWithConditionsDomainRoleId);
			foreach ( global::JA.Risk.ObjectWithConditionsHasConditions link in links )
			{
				if ( target.Equals(link.Condition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ObjectHasPorts
	/// Description for JA.Risk.ObjectHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ObjectHasPorts.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ObjectHasPorts.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9587eb6a-097f-4a44-8c8e-1e3679ae73c7")]
	public partial class ObjectHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ObjectHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9587eb6a, 0x097f, 0x4a44, 0x8c, 0x8e, 0x1e, 0x36, 0x79, 0xae, 0x73, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ObjectHasPorts link in the same Partition as the given ObjectWithPorts
		/// </summary>
		/// <param name="source">ObjectWithPorts to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public ObjectHasPorts(ObjectWithPorts source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ObjectHasPorts.ObjectWithPortsDomainRoleId, source), new DslModeling::RoleAssignment(ObjectHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ObjectHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ObjectHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ObjectWithPorts domain role code
		
		/// <summary>
		/// ObjectWithPorts domain role Id.
		/// </summary>
		public static readonly global::System.Guid ObjectWithPortsDomainRoleId = new global::System.Guid(0x839f0806, 0x1251, 0x4a2f, 0xac, 0xf7, 0x14, 0x43, 0x4b, 0x27, 0x67, 0xeb);
		
		/// <summary>
		/// DomainRole ObjectWithPorts
		/// Description for JA.Risk.ObjectHasPorts.ObjectWithPorts
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ObjectHasPorts/ObjectWithPorts.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ObjectHasPorts/ObjectWithPorts.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="JA.Risk.ObjectHasPorts/ObjectWithPorts.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("839f0806-1251-4a2f-acf7-14434b2767eb")]
		public virtual ObjectWithPorts ObjectWithPorts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ObjectWithPorts)DslModeling::DomainRoleInfo.GetRolePlayer(this, ObjectWithPortsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ObjectWithPortsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ObjectWithPorts of a Port
		/// <summary>
		/// Gets ObjectWithPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ObjectWithPorts GetObjectWithPorts(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as ObjectWithPorts;
		}
		
		/// <summary>
		/// Sets ObjectWithPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetObjectWithPorts(Port element, ObjectWithPorts newObjectWithPorts)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newObjectWithPorts);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x6b2d09b4, 0x469d, 0x4103, 0xa1, 0x73, 0xc6, 0x1c, 0x89, 0x48, 0xa0, 0xb9);
		
		/// <summary>
		/// DomainRole Port
		/// Description for JA.Risk.ObjectHasPorts.Port
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ObjectHasPorts/Port.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ObjectHasPorts/Port.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ObjectWithPorts", PropertyDisplayNameKey="JA.Risk.ObjectHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6b2d09b4-469d-4103-a173-c61c8948a0b9")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a ObjectWithPorts
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(ObjectWithPorts element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, ObjectWithPortsDomainRoleId);
		}
		#endregion
		#region ObjectWithPorts link accessor
		/// <summary>
		/// Get the list of ObjectHasPorts links to a ObjectWithPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ObjectHasPorts> GetLinksToPorts ( global::JA.Risk.ObjectWithPorts objectWithPortsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectHasPorts>(objectWithPortsInstance, global::JA.Risk.ObjectHasPorts.ObjectWithPortsDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the ObjectHasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ObjectHasPorts GetLinkToObjectWithPorts (global::JA.Risk.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ObjectHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectHasPorts>(portInstance, global::JA.Risk.ObjectHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ObjectHasPorts instance accessors
		
		/// <summary>
		/// Get any ObjectHasPorts links between a given ObjectWithPorts and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ObjectHasPorts> GetLinks( global::JA.Risk.ObjectWithPorts source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ObjectHasPorts> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ObjectHasPorts>();
			global::System.Collections.Generic.IList<global::JA.Risk.ObjectHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectHasPorts>(source, global::JA.Risk.ObjectHasPorts.ObjectWithPortsDomainRoleId);
			foreach ( global::JA.Risk.ObjectHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ObjectHasPorts link between a given ObjectWithPortsand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ObjectHasPorts GetLink( global::JA.Risk.ObjectWithPorts source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ObjectHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ObjectHasPorts>(source, global::JA.Risk.ObjectHasPorts.ObjectWithPortsDomainRoleId);
			foreach ( global::JA.Risk.ObjectHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship LegitimateAccess
	/// Description for JA.Risk.LegitimateAccess
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.LegitimateAccess.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.LegitimateAccess.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0390b473-a13d-48c0-a29c-e28c6e325e0a")]
	public partial class LegitimateAccess : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LegitimateAccess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0390b473, 0xa13d, 0x48c0, 0xa2, 0x9c, 0xe2, 0x8c, 0x6e, 0x32, 0x5e, 0x0a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LegitimateAccess link in the same Partition as the given ThreatAgent
		/// </summary>
		/// <param name="source">ThreatAgent to use as the source of the relationship.</param>
		/// <param name="target">Asset to use as the target of the relationship.</param>
		public LegitimateAccess(ThreatAgent source, Asset target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LegitimateAccess.ThreatAgentDomainRoleId, source), new DslModeling::RoleAssignment(LegitimateAccess.AssetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LegitimateAccess(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LegitimateAccess(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LegitimateAccess(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LegitimateAccess(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ThreatAgent domain role code
		
		/// <summary>
		/// ThreatAgent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ThreatAgentDomainRoleId = new global::System.Guid(0x0f93b3e0, 0xd4c8, 0x4327, 0x92, 0x95, 0xb6, 0x94, 0x8f, 0xff, 0x93, 0x20);
		
		/// <summary>
		/// DomainRole ThreatAgent
		/// Description for JA.Risk.LegitimateAccess.ThreatAgent
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.LegitimateAccess/ThreatAgent.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.LegitimateAccess/ThreatAgent.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Assets", PropertyDisplayNameKey="JA.Risk.LegitimateAccess/ThreatAgent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0f93b3e0-d4c8-4327-9295-b6948fff9320")]
		public virtual ThreatAgent ThreatAgent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ThreatAgent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ThreatAgentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ThreatAgentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ThreatAgents of a Asset
		/// <summary>
		/// Gets a list of ThreatAgents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ThreatAgent> GetThreatAgents(Asset element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ThreatAgent>, ThreatAgent>(element, AssetDomainRoleId);
		}
		#endregion
		#region Asset domain role code
		
		/// <summary>
		/// Asset domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssetDomainRoleId = new global::System.Guid(0x70f92599, 0x8f6d, 0x4820, 0x92, 0x17, 0xe3, 0xeb, 0x96, 0x02, 0x65, 0xf7);
		
		/// <summary>
		/// DomainRole Asset
		/// Description for JA.Risk.LegitimateAccess.Asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.LegitimateAccess/Asset.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.LegitimateAccess/Asset.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ThreatAgents", PropertyDisplayNameKey="JA.Risk.LegitimateAccess/Asset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("70f92599-8f6d-4820-9217-e3eb960265f7")]
		public virtual Asset Asset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Asset)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Assets of a ThreatAgent
		/// <summary>
		/// Gets a list of Assets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Asset> GetAssets(ThreatAgent element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(element, ThreatAgentDomainRoleId);
		}
		#endregion
		#region Conditions domain property code
		
		/// <summary>
		/// Conditions domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionsDomainPropertyId = new global::System.Guid(0x1ef66e36, 0x51e4, 0x4f33, 0xab, 0xd4, 0xb4, 0xc1, 0xf6, 0xe9, 0x21, 0xae);
		
		/// <summary>
		/// Storage for Conditions
		/// </summary>
		private global::System.String conditionsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Conditions domain property.
		/// The conditions on an asset that a threat agent may legitimately access,
		/// separated by commas
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.LegitimateAccess/Conditions.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.LegitimateAccess/Conditions.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1ef66e36-51e4-4f33-abd4-b4c1f6e921ae")]
		public global::System.String Conditions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConditionsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LegitimateAccess.Conditions domain property.
		/// </summary>
		internal sealed partial class ConditionsPropertyHandler : DslModeling::DomainPropertyValueHandler<LegitimateAccess, global::System.String>
		{
			private ConditionsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LegitimateAccess.Conditions domain property value handler.
			/// </summary>
			public static readonly ConditionsPropertyHandler Instance = new ConditionsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LegitimateAccess.Conditions domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConditionsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LegitimateAccess element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LegitimateAccess element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ThreatAgent link accessor
		/// <summary>
		/// Get the list of LegitimateAccess links to a ThreatAgent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.LegitimateAccess> GetLinksToAssets ( global::JA.Risk.ThreatAgent threatAgentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.LegitimateAccess>(threatAgentInstance, global::JA.Risk.LegitimateAccess.ThreatAgentDomainRoleId);
		}
		#endregion
		#region Asset link accessor
		/// <summary>
		/// Get the list of LegitimateAccess links to a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.LegitimateAccess> GetLinksToThreatAgents ( global::JA.Risk.Asset assetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.LegitimateAccess>(assetInstance, global::JA.Risk.LegitimateAccess.AssetDomainRoleId);
		}
		#endregion
		#region LegitimateAccess instance accessors
		
		/// <summary>
		/// Get any LegitimateAccess links between a given ThreatAgent and a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.LegitimateAccess> GetLinks( global::JA.Risk.ThreatAgent source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.LegitimateAccess> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.LegitimateAccess>();
			global::System.Collections.Generic.IList<global::JA.Risk.LegitimateAccess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.LegitimateAccess>(source, global::JA.Risk.LegitimateAccess.ThreatAgentDomainRoleId);
			foreach ( global::JA.Risk.LegitimateAccess link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LegitimateAccess link between a given ThreatAgentand a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.LegitimateAccess GetLink( global::JA.Risk.ThreatAgent source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.LegitimateAccess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.LegitimateAccess>(source, global::JA.Risk.LegitimateAccess.ThreatAgentDomainRoleId);
			foreach ( global::JA.Risk.LegitimateAccess link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
