<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" hostspecific="true" #>
<#@ output extension=".pl" #> 
<#@ Risk processor="RiskDirectiveProcessor" requires="FileName='C:\Users\johna\OneDrive\Documents\GitHub\DAWB\DAWB\Testbed\Risk1.Risk';Validation='menu'" #>
%!
% Risk model: <#= this.RiskModel.Name #>
% InputFile: <#= this.Host.ResolveParameterValue("Risk", "RiskDirectiveProcessor", "InputFile") #>
% FileName: <#= this.Host.ResolveParameterValue("Risk", "RiskDirectiveProcessor", "FileName") #>
%
% Here is a list of containers in the model:
<# foreach (Container container in this.RiskModel.Containers) { #>
container( '<#= this.RiskModel.Name #>.<#= container.Name #>' ).
<# if ( container.Type != null && container.Type.Length >0 ) { #>
containerType( '<#= this.RiskModel.Name #>.<#= container.Name #>', '<#= container.Type #>' ).
<# } #>
<# if ( container.InternalFunctions != null && container.InternalFunctions.Length >0 ) { #>
containerInternalFunctions( '<#= this.RiskModel.Name #>.<#= container.Name #>', '<#= container.InternalFunctions #>' ).
<# } #>
<# foreach (Port port in container.Ports) { #>
containerHasPort( '<#= this.RiskModel.Name #>.<#= container.Name #>', '<#= this.RiskModel.Name #>.<#= port.Name #>' ).
<# System.Collections.ObjectModel.ReadOnlyCollection<Interaction> interactions = Interaction.GetLinksToSourcePort( port );
foreach (Interaction interaction in interactions) { #>
interaction( '<#= this.RiskModel.Name #>.<#= port.Name #>', '<#= this.RiskModel.Name #>.<#= interaction.SourcePort.Name #>', '<#= interaction.Attack #>' ).
<# } #>
<# } #>
<# foreach (Asset asset in container.Assets) { #>
containerHasAssets( '<#= this.RiskModel.Name #>.<#= container.Name #>', '<#= this.RiskModel.Name #>.<#= asset.Name #>' ).
<# } #>
<# foreach (Container contained in container.TargetContainers) { 
	Contains contains = Contains.GetLink(container, contained);
#>
containerHasContainer( '<#= this.RiskModel.Name #>.<#= container.Name #>', '<#= this.RiskModel.Name #>.<#= contained.Name #>', '<#= contains.Attack #>', '<#= contains.Number #>' ).
<# } #>
<# foreach (Container subclass in container.Subclasses) { #>
containerHasSubclasses( '<#= this.RiskModel.Name #>.<#= container.Name #>', '<#= this.RiskModel.Name #>.<#= subclass.Name #>' ).
<# } #>
<# } #>

% Here is a list of assets in the model:
<# foreach (Asset asset in this.RiskModel.Assets) {#>
asset( '<#= this.RiskModel.Name #>.<#= asset.Name #>' ).
<# if ( asset.Number != null && asset.Number.Length >0 ) { #>
assetNumber( '<#= asset.Name #>', '<#= asset.Number #>' ).
<# } #>
<# if ( asset.SingleConfidentialityValue != null && asset.SingleConfidentialityValue.Length >0 ) { #>
assetSingleConfidentialityValue( '<#= this.RiskModel.Name #>.<#= asset.Name #>', '<#= asset.SingleConfidentialityValue #>' ).
<# } #>
<# if ( asset.SingleIntegrityValue != null && asset.SingleIntegrityValue.Length >0 ) { #>
assetSingleIntegrityValue( '<#= this.RiskModel.Name #>.<#= asset.Name #>', '<#= asset.SingleIntegrityValue #>' ).
<# } #>
<# if ( asset.SingleAvailabilityValue != null && asset.SingleAvailabilityValue.Length >0 ) { #>
assetSingleAvailabilityValue( '<#= this.RiskModel.Name #>.<#= asset.Name #>', '<#= asset.SingleAvailabilityValue #>' ).
<# } #>
<# } #>

% Here is a list of threat agents in the model:
<# foreach (ThreatAgent agent in this.RiskModel.ThreatAgents) {#>
threatAgent( '<#= this.RiskModel.Name #>.<#= agent.Name #>' ).
<# if ( agent.Number != null && agent.Number.Length >0 ) { #>
agentNumber( '<#= this.RiskModel.Name #>.<#= agent.Name #>', '<#= agent.Number #>' ).
<# } #>
<# if ( agent.InternalFunctions != null && agent.InternalFunctions.Length >0 ) { #>
agentInternalFunctions( '<#= this.RiskModel.Name #>.<#= agent.Name #>', '<#= agent.InternalFunctions #>' ).
<# } #>
<# foreach (Port port in agent.Ports) { #>
agentHasPort( '<#= this.RiskModel.Name #>.<#= agent.Name #>', '<#= this.RiskModel.Name #>.<#= port.Name #>' ).
<# System.Collections.ObjectModel.ReadOnlyCollection<Interaction> interactions = Interaction.GetLinksToSourcePort( port );
foreach (Interaction interaction in interactions) { #>
interaction( '<#= this.RiskModel.Name #>.<#= port.Name #>', '<#= this.RiskModel.Name #>.<#= interaction.SourcePort.Name #>', '<#= interaction.Attack #>' ).
<# } #>
<# } #>
<# foreach (Condition cond in agent.Conditions) { #>
agentHasCondition( '<#= this.RiskModel.Name #>.<#= agent.Name #>', '<#= this.RiskModel.Name #>.<#= cond.Name #>' ).
<# } #>
<# System.Collections.ObjectModel.ReadOnlyCollection<LegitimateAccess> accesses = LegitimateAccess.GetLinksToAssets( agent );
foreach (LegitimateAccess access in accesses) { #>
agentHasLegitimateAccesses( '<#= this.RiskModel.Name #>.<#= agent.Name #>', '<#= this.RiskModel.Name #>.<#= access.Asset.Name #>', '[<#= access.Conditions #>]' ).
<# } #>
<# } #>
