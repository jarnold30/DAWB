//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace JA.Risk
{
	/// <summary>
	/// DomainModel RiskDomainModel
	/// Description for JA.Risk.Risk
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskDomainModel.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskDomainModel.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("dcaa76d0-34ef-466f-ab09-b6f3dadd948b")]
	public partial class RiskDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// RiskDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xdcaa76d0, 0x34ef, 0x466f, 0xab, 0x09, 0xb6, 0xf3, 0xda, 0xdd, 0x94, 0x8b);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public RiskDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(NamedElement),
				typeof(RiskModel),
				typeof(Container),
				typeof(Port),
				typeof(Asset),
				typeof(ThreatAgent),
				typeof(Condition),
				typeof(ObjectWithConditions),
				typeof(ObjectWithPorts),
				typeof(RiskModelHasContainers),
				typeof(Generalization),
				typeof(Interaction),
				typeof(Contains),
				typeof(ContainerReferencesAssets),
				typeof(RiskModelHasAssets),
				typeof(RiskModelHasThreatAgents),
				typeof(ObjectWithConditionsHasConditions),
				typeof(ObjectHasPorts),
				typeof(LegitimateAccess),
				typeof(RiskDiagram),
				typeof(InteractsLink),
				typeof(GeneralizationLink),
				typeof(ContainsLink),
				typeof(ContainsAsset),
				typeof(LegitimateAccessConnector),
				typeof(ThreatAgentCompartmentShape),
				typeof(ContainerCompartmentShape),
				typeof(AssetCompartmentShape),
				typeof(PortShape),
				typeof(global::JA.Risk.FixUpDiagram),
				typeof(global::JA.Risk.DecoratorPropertyChanged),
				typeof(global::JA.Risk.ConnectorRolePlayerChanged),
				typeof(global::JA.Risk.CompartmentItemAddRule),
				typeof(global::JA.Risk.CompartmentItemDeleteRule),
				typeof(global::JA.Risk.CompartmentItemRolePlayerChangeRule),
				typeof(global::JA.Risk.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::JA.Risk.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(NamedElement), "Name", NamedElement.NameDomainPropertyId, typeof(NamedElement.NamePropertyHandler)),
				new DomainMemberInfo(typeof(NamedElement), "Notes", NamedElement.NotesDomainPropertyId, typeof(NamedElement.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(Container), "Type", Container.TypeDomainPropertyId, typeof(Container.TypePropertyHandler)),
				new DomainMemberInfo(typeof(Asset), "Number", Asset.NumberDomainPropertyId, typeof(Asset.NumberPropertyHandler)),
				new DomainMemberInfo(typeof(Asset), "SingleConfidentialityValue", Asset.SingleConfidentialityValueDomainPropertyId, typeof(Asset.SingleConfidentialityValuePropertyHandler)),
				new DomainMemberInfo(typeof(Asset), "SingleIntegrityValue", Asset.SingleIntegrityValueDomainPropertyId, typeof(Asset.SingleIntegrityValuePropertyHandler)),
				new DomainMemberInfo(typeof(Asset), "SingleAvailabilityValue", Asset.SingleAvailabilityValueDomainPropertyId, typeof(Asset.SingleAvailabilityValuePropertyHandler)),
				new DomainMemberInfo(typeof(ThreatAgent), "Number", ThreatAgent.NumberDomainPropertyId, typeof(ThreatAgent.NumberPropertyHandler)),
				new DomainMemberInfo(typeof(ObjectWithPorts), "InternalFunctions", ObjectWithPorts.InternalFunctionsDomainPropertyId, typeof(ObjectWithPorts.InternalFunctionsPropertyHandler)),
				new DomainMemberInfo(typeof(Interaction), "Attack", Interaction.AttackDomainPropertyId, typeof(Interaction.AttackPropertyHandler)),
				new DomainMemberInfo(typeof(Contains), "Number", Contains.NumberDomainPropertyId, typeof(Contains.NumberPropertyHandler)),
				new DomainMemberInfo(typeof(Contains), "Attack", Contains.AttackDomainPropertyId, typeof(Contains.AttackPropertyHandler)),
				new DomainMemberInfo(typeof(LegitimateAccess), "Conditions", LegitimateAccess.ConditionsDomainPropertyId, typeof(LegitimateAccess.ConditionsPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(RiskModelHasContainers), "RiskModel", RiskModelHasContainers.RiskModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(RiskModelHasContainers), "Container", RiskModelHasContainers.ContainerDomainRoleId),
				new DomainRolePlayerInfo(typeof(Generalization), "Superclass", Generalization.SuperclassDomainRoleId),
				new DomainRolePlayerInfo(typeof(Generalization), "Subclass", Generalization.SubclassDomainRoleId),
				new DomainRolePlayerInfo(typeof(Interaction), "SourcePort", Interaction.SourcePortDomainRoleId),
				new DomainRolePlayerInfo(typeof(Interaction), "TargetPort", Interaction.TargetPortDomainRoleId),
				new DomainRolePlayerInfo(typeof(Contains), "SourceContainer", Contains.SourceContainerDomainRoleId),
				new DomainRolePlayerInfo(typeof(Contains), "TargetContainer", Contains.TargetContainerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ContainerReferencesAssets), "Container", ContainerReferencesAssets.ContainerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ContainerReferencesAssets), "Asset", ContainerReferencesAssets.AssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(RiskModelHasAssets), "RiskModel", RiskModelHasAssets.RiskModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(RiskModelHasAssets), "Asset", RiskModelHasAssets.AssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(RiskModelHasThreatAgents), "RiskModel", RiskModelHasThreatAgents.RiskModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(RiskModelHasThreatAgents), "ThreatAgent", RiskModelHasThreatAgents.ThreatAgentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectWithConditionsHasConditions), "ObjectWithConditions", ObjectWithConditionsHasConditions.ObjectWithConditionsDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectWithConditionsHasConditions), "Condition", ObjectWithConditionsHasConditions.ConditionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectHasPorts), "ObjectWithPorts", ObjectHasPorts.ObjectWithPortsDomainRoleId),
				new DomainRolePlayerInfo(typeof(ObjectHasPorts), "Port", ObjectHasPorts.PortDomainRoleId),
				new DomainRolePlayerInfo(typeof(LegitimateAccess), "ThreatAgent", LegitimateAccess.ThreatAgentDomainRoleId),
				new DomainRolePlayerInfo(typeof(LegitimateAccess), "Asset", LegitimateAccess.AssetDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(19);
				createElementMap.Add(typeof(RiskModel), 0);
				createElementMap.Add(typeof(Container), 1);
				createElementMap.Add(typeof(Port), 2);
				createElementMap.Add(typeof(Asset), 3);
				createElementMap.Add(typeof(ThreatAgent), 4);
				createElementMap.Add(typeof(Condition), 5);
				createElementMap.Add(typeof(RiskDiagram), 6);
				createElementMap.Add(typeof(InteractsLink), 7);
				createElementMap.Add(typeof(GeneralizationLink), 8);
				createElementMap.Add(typeof(ContainsLink), 9);
				createElementMap.Add(typeof(ContainsAsset), 10);
				createElementMap.Add(typeof(LegitimateAccessConnector), 11);
				createElementMap.Add(typeof(ThreatAgentCompartmentShape), 12);
				createElementMap.Add(typeof(ContainerCompartmentShape), 13);
				createElementMap.Add(typeof(AssetCompartmentShape), 14);
				createElementMap.Add(typeof(PortShape), 15);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::JA.Risk.RiskDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new RiskModel(partition, propertyAssignments);
				case 1: return new Container(partition, propertyAssignments);
				case 2: return new Port(partition, propertyAssignments);
				case 3: return new Asset(partition, propertyAssignments);
				case 4: return new ThreatAgent(partition, propertyAssignments);
				case 5: return new Condition(partition, propertyAssignments);
				case 6: return new RiskDiagram(partition, propertyAssignments);
				case 7: return new InteractsLink(partition, propertyAssignments);
				case 8: return new GeneralizationLink(partition, propertyAssignments);
				case 9: return new ContainsLink(partition, propertyAssignments);
				case 10: return new ContainsAsset(partition, propertyAssignments);
				case 11: return new LegitimateAccessConnector(partition, propertyAssignments);
				case 12: return new ThreatAgentCompartmentShape(partition, propertyAssignments);
				case 13: return new ContainerCompartmentShape(partition, propertyAssignments);
				case 14: return new AssetCompartmentShape(partition, propertyAssignments);
				case 15: return new PortShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(10);
				createElementLinkMap.Add(typeof(RiskModelHasContainers), 0);
				createElementLinkMap.Add(typeof(Generalization), 1);
				createElementLinkMap.Add(typeof(Interaction), 2);
				createElementLinkMap.Add(typeof(Contains), 3);
				createElementLinkMap.Add(typeof(ContainerReferencesAssets), 4);
				createElementLinkMap.Add(typeof(RiskModelHasAssets), 5);
				createElementLinkMap.Add(typeof(RiskModelHasThreatAgents), 6);
				createElementLinkMap.Add(typeof(ObjectWithConditionsHasConditions), 7);
				createElementLinkMap.Add(typeof(ObjectHasPorts), 8);
				createElementLinkMap.Add(typeof(LegitimateAccess), 9);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::JA.Risk.RiskDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new RiskModelHasContainers(partition, roleAssignments, propertyAssignments);
				case 1: return new Generalization(partition, roleAssignments, propertyAssignments);
				case 2: return new Interaction(partition, roleAssignments, propertyAssignments);
				case 3: return new Contains(partition, roleAssignments, propertyAssignments);
				case 4: return new ContainerReferencesAssets(partition, roleAssignments, propertyAssignments);
				case 5: return new RiskModelHasAssets(partition, roleAssignments, propertyAssignments);
				case 6: return new RiskModelHasThreatAgents(partition, roleAssignments, propertyAssignments);
				case 7: return new ObjectWithConditionsHasConditions(partition, roleAssignments, propertyAssignments);
				case 8: return new ObjectHasPorts(partition, roleAssignments, propertyAssignments);
				case 9: return new LegitimateAccess(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "JA.Risk.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return RiskDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (RiskDomainModel.resourceManager == null)
				{
					RiskDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(RiskDomainModel).Assembly);
				}
				return RiskDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return RiskDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return RiskDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (RiskDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new RiskCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					RiskDomainModel.copyClosure = copyFilter;
				}
				return RiskDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (RiskDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new RiskDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					RiskDomainModel.removeClosure = removeFilter;
				}
				return RiskDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::JA.Risk.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::JA.Risk.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::JA.Risk.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::JA.Risk.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::JA.Risk.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::JA.Risk.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::JA.Risk.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::JA.Risk.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::JA.Risk.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::JA.Risk.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::JA.Risk.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::JA.Risk.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::JA.Risk.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::JA.Risk.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::JA.Risk.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::JA.Risk.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RiskDeleteClosure : RiskDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RiskDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RiskDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public RiskDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::JA.Risk.RiskModelHasContainers.ContainerDomainRoleId, true);
			DomainRoles.Add(global::JA.Risk.RiskModelHasAssets.AssetDomainRoleId, true);
			DomainRoles.Add(global::JA.Risk.RiskModelHasThreatAgents.ThreatAgentDomainRoleId, true);
			DomainRoles.Add(global::JA.Risk.ObjectWithConditionsHasConditions.ConditionDomainRoleId, true);
			DomainRoles.Add(global::JA.Risk.ObjectHasPorts.PortDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RiskCopyClosure : RiskCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RiskCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class RiskCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RiskCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

