//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace JA.Risk
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.NamedElement.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.NamedElement.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("2f6974ea-1dc8-4ea9-945a-a63c86df2eab")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f6974ea, 0x1dc8, 0x4ea9, 0x94, 0x5a, 0xa6, 0x3c, 0x86, 0xdf, 0x2e, 0xab);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x371a2ffb, 0x0a87, 0x4ac9, 0x80, 0xd1, 0x36, 0x40, 0xec, 0x65, 0xc2, 0x48);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the element
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.NamedElement/Name.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("JA.Risk.NamedElement/Name.Category", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.NamedElement/Name.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("371a2ffb-0a87-4ac9-80d1-3640ec65c248")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x78080aa1, 0xdda9, 0x4129, 0x99, 0xa0, 0x5f, 0xeb, 0xe9, 0xb4, 0xa4, 0x62);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Description for JA.Risk.NamedElement.Notes
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.NamedElement/Notes.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("JA.Risk.NamedElement/Notes.Category", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.NamedElement/Notes.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("78080aa1-dda9-4129-99a0-5febe9b4a462")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass RiskModel
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskModel.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskModel.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cdf6b92a-2285-4333-b19a-bac91ff13cfa")]
	public partial class RiskModel : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RiskModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcdf6b92a, 0x2285, 0x4333, 0xb1, 0x9a, 0xba, 0xc9, 0x1f, 0xf1, 0x3c, 0xfa);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RiskModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RiskModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Containers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Containers.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Container> Containers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
			}
		}
		#endregion
		#region Assets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Assets.
		/// Description for JA.Risk.RiskModelHasAssets.RiskModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Asset> Assets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(global::JA.Risk.RiskModelHasAssets.RiskModelDomainRoleId);
			}
		}
		#endregion
		#region ThreatAgents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ThreatAgents.
		/// Description for JA.Risk.RiskModelHasThreatAgents.RiskModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ThreatAgent> ThreatAgents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ThreatAgent>, ThreatAgent>(global::JA.Risk.RiskModelHasThreatAgents.RiskModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Risk.Container.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Risk.ThreatAgent.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Risk.Asset.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::JA.Risk.Container sourceContainer1 = sourceElement as global::JA.Risk.Container;
			if (sourceContainer1 != null)
			{
				// Create link for path RiskModelHasContainers.Containers
				this.Containers.Add(sourceContainer1);

				return;
			}
				
			global::JA.Risk.ThreatAgent sourceThreatAgent2 = sourceElement as global::JA.Risk.ThreatAgent;
			if (sourceThreatAgent2 != null)
			{
				// Create link for path RiskModelHasThreatAgents.ThreatAgents
				this.ThreatAgents.Add(sourceThreatAgent2);

				return;
			}
				
			global::JA.Risk.Asset sourceAsset3 = sourceElement as global::JA.Risk.Asset;
			if (sourceAsset3 != null)
			{
				// Create link for path RiskModelHasAssets.Assets
				this.Assets.Add(sourceAsset3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::JA.Risk.Container sourceContainer1 = sourceElement as global::JA.Risk.Container;
			if (sourceContainer1 != null)
			{
				// Delete link for path RiskModelHasContainers.Containers
				
				foreach (DslModeling::ElementLink link in global::JA.Risk.RiskModelHasContainers.GetLinks((global::JA.Risk.RiskModel)this, sourceContainer1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId, global::JA.Risk.RiskModelHasContainers.ContainerDomainRoleId);
				}

				return;
			}
				
			global::JA.Risk.ThreatAgent sourceThreatAgent2 = sourceElement as global::JA.Risk.ThreatAgent;
			if (sourceThreatAgent2 != null)
			{
				// Delete link for path RiskModelHasThreatAgents.ThreatAgents
				
				foreach (DslModeling::ElementLink link in global::JA.Risk.RiskModelHasThreatAgents.GetLinks((global::JA.Risk.RiskModel)this, sourceThreatAgent2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Risk.RiskModelHasThreatAgents.RiskModelDomainRoleId, global::JA.Risk.RiskModelHasThreatAgents.ThreatAgentDomainRoleId);
				}

				return;
			}
				
			global::JA.Risk.Asset sourceAsset3 = sourceElement as global::JA.Risk.Asset;
			if (sourceAsset3 != null)
			{
				// Delete link for path RiskModelHasAssets.Assets
				
				foreach (DslModeling::ElementLink link in global::JA.Risk.RiskModelHasAssets.GetLinks((global::JA.Risk.RiskModel)this, sourceAsset3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Risk.RiskModelHasAssets.RiskModelDomainRoleId, global::JA.Risk.RiskModelHasAssets.AssetDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass Container
	/// Represents part of a system being studied: a building, computer, network etc
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("05a5c5ec-ce41-469f-b478-e541d5aadb08")]
	public partial class Container : ObjectWithPorts
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Container domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05a5c5ec, 0xce41, 0x469f, 0xb4, 0x78, 0xe5, 0x41, 0xd5, 0xaa, 0xdb, 0x08);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Container(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Container(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x8721f980, 0xccc6, 0x4115, 0xa1, 0xbe, 0x4e, 0x85, 0xae, 0x47, 0x55, 0x01);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// The type of the container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Container/Type.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Container/Type.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8721f980-ccc6-4115-a1be-4e85ae475501")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Container.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Container, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Container.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Container.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Container element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Container element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RiskModel opposite domain role accessor
		/// <summary>
		/// Gets or sets RiskModel.
		/// </summary>
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Risk.RiskModelHasContainers.ContainerDomainRoleId) as RiskModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Risk.RiskModelHasContainers.ContainerDomainRoleId, value);
			}
		}
		#endregion
		#region Subclasses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Container> Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(global::JA.Risk.Generalization.SuperclassDomainRoleId);
			}
		}
		#endregion
		#region Superclass opposite domain role accessor
		/// <summary>
		/// Gets or sets Superclass.
		/// </summary>
		public virtual Container Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Risk.Generalization.SubclassDomainRoleId) as Container;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Risk.Generalization.SubclassDomainRoleId, value);
			}
		}
		#endregion
		#region TargetContainers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetContainers.
		/// Description for JA.Risk.Contains.SourceContainer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Container> TargetContainers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(global::JA.Risk.Contains.SourceContainerDomainRoleId);
			}
		}
		#endregion
		#region SourceContainers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceContainers.
		/// Description for JA.Risk.Contains.TargetContainer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Container> SourceContainers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(global::JA.Risk.Contains.TargetContainerDomainRoleId);
			}
		}
		#endregion
		#region Assets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Assets.
		/// Description for JA.Risk.ContainerReferencesAssets.Container
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Asset> Assets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(global::JA.Risk.ContainerReferencesAssets.ContainerDomainRoleId);
			}
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass Port
	/// Description for JA.Risk.Port
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Port.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Port.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("70a78dd6-9b1b-452e-bd17-314df32f61fa")]
	public partial class Port : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Port domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x70a78dd6, 0x9b1b, 0x452e, 0xbd, 0x17, 0x31, 0x4d, 0xf3, 0x2f, 0x61, 0xfa);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Port(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Port(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TargetPort opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetPort.
		/// Description for JA.Risk.Interaction.SourcePort
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Port> TargetPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(global::JA.Risk.Interaction.SourcePortDomainRoleId);
			}
		}
		#endregion
		#region SourcePort opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourcePort.
		/// Description for JA.Risk.Interaction.TargetPort
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Port> SourcePort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(global::JA.Risk.Interaction.TargetPortDomainRoleId);
			}
		}
		#endregion
		#region ObjectWithPorts opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectWithPorts.
		/// Description for JA.Risk.ObjectHasPorts.Port
		/// </summary>
		public virtual ObjectWithPorts ObjectWithPorts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Risk.ObjectHasPorts.PortDomainRoleId) as ObjectWithPorts;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Risk.ObjectHasPorts.PortDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass Asset
	/// Represents something of value
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Asset.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Asset.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e7ffb3b-fc14-46ee-a021-eb9022be9768")]
	public partial class Asset : ObjectWithConditions
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Asset domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e7ffb3b, 0xfc14, 0x46ee, 0xa0, 0x21, 0xeb, 0x90, 0x22, 0xbe, 0x97, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Asset(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Asset(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Number domain property code
		
		/// <summary>
		/// Number domain property Id.
		/// </summary>
		public static readonly global::System.Guid NumberDomainPropertyId = new global::System.Guid(0xa27ca295, 0x7dc9, 0x4f31, 0xbf, 0xfa, 0xd0, 0xea, 0xce, 0x58, 0xd5, 0xbd);
		
		/// <summary>
		/// Storage for Number
		/// </summary>
		private global::System.String numberPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Number domain property.
		/// The number of instances of this asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Asset/Number.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Asset/Number.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a27ca295-7dc9-4f31-bffa-d0eace58d5bd")]
		public global::System.String Number
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return numberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NumberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Asset.Number domain property.
		/// </summary>
		internal sealed partial class NumberPropertyHandler : DslModeling::DomainPropertyValueHandler<Asset, global::System.String>
		{
			private NumberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Asset.Number domain property value handler.
			/// </summary>
			public static readonly NumberPropertyHandler Instance = new NumberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Asset.Number domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NumberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Asset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.numberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Asset element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.numberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SingleConfidentialityValue domain property code
		
		/// <summary>
		/// SingleConfidentialityValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid SingleConfidentialityValueDomainPropertyId = new global::System.Guid(0x5ea7bd42, 0x55d8, 0x4e64, 0x9e, 0x6b, 0xb7, 0xb6, 0x7b, 0x05, 0x93, 0x2d);
		
		/// <summary>
		/// Storage for SingleConfidentialityValue
		/// </summary>
		private global::System.String singleConfidentialityValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SingleConfidentialityValue domain property.
		/// The impact of disclosure of this asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Asset/SingleConfidentialityValue.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("JA.Risk.Asset/SingleConfidentialityValue.Category", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Asset/SingleConfidentialityValue.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5ea7bd42-55d8-4e64-9e6b-b7b67b05932d")]
		public global::System.String SingleConfidentialityValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return singleConfidentialityValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SingleConfidentialityValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Asset.SingleConfidentialityValue domain property.
		/// </summary>
		internal sealed partial class SingleConfidentialityValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Asset, global::System.String>
		{
			private SingleConfidentialityValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Asset.SingleConfidentialityValue domain property value handler.
			/// </summary>
			public static readonly SingleConfidentialityValuePropertyHandler Instance = new SingleConfidentialityValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Asset.SingleConfidentialityValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SingleConfidentialityValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Asset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.singleConfidentialityValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Asset element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.singleConfidentialityValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SingleIntegrityValue domain property code
		
		/// <summary>
		/// SingleIntegrityValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid SingleIntegrityValueDomainPropertyId = new global::System.Guid(0xdd904d38, 0xee8b, 0x4e65, 0xa6, 0x1e, 0x81, 0xe1, 0x34, 0x00, 0x0f, 0x67);
		
		/// <summary>
		/// Storage for SingleIntegrityValue
		/// </summary>
		private global::System.String singleIntegrityValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SingleIntegrityValue domain property.
		/// The impact of tampering with this asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Asset/SingleIntegrityValue.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("JA.Risk.Asset/SingleIntegrityValue.Category", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Asset/SingleIntegrityValue.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dd904d38-ee8b-4e65-a61e-81e134000f67")]
		public global::System.String SingleIntegrityValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return singleIntegrityValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SingleIntegrityValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Asset.SingleIntegrityValue domain property.
		/// </summary>
		internal sealed partial class SingleIntegrityValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Asset, global::System.String>
		{
			private SingleIntegrityValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Asset.SingleIntegrityValue domain property value handler.
			/// </summary>
			public static readonly SingleIntegrityValuePropertyHandler Instance = new SingleIntegrityValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Asset.SingleIntegrityValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SingleIntegrityValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Asset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.singleIntegrityValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Asset element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.singleIntegrityValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SingleAvailabilityValue domain property code
		
		/// <summary>
		/// SingleAvailabilityValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid SingleAvailabilityValueDomainPropertyId = new global::System.Guid(0xe066c9b1, 0x8833, 0x4137, 0x9d, 0x4f, 0x98, 0x36, 0x85, 0x7a, 0x44, 0xa2);
		
		/// <summary>
		/// Storage for SingleAvailabilityValue
		/// </summary>
		private global::System.String singleAvailabilityValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SingleAvailabilityValue domain property.
		/// The impact of loss of this asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Asset/SingleAvailabilityValue.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("JA.Risk.Asset/SingleAvailabilityValue.Category", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Asset/SingleAvailabilityValue.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e066c9b1-8833-4137-9d4f-9836857a44a2")]
		public global::System.String SingleAvailabilityValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return singleAvailabilityValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SingleAvailabilityValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Asset.SingleAvailabilityValue domain property.
		/// </summary>
		internal sealed partial class SingleAvailabilityValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Asset, global::System.String>
		{
			private SingleAvailabilityValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Asset.SingleAvailabilityValue domain property value handler.
			/// </summary>
			public static readonly SingleAvailabilityValuePropertyHandler Instance = new SingleAvailabilityValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Asset.SingleAvailabilityValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SingleAvailabilityValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Asset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.singleAvailabilityValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Asset element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.singleAvailabilityValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Containers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Containers.
		/// Description for JA.Risk.ContainerReferencesAssets.Asset
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Container> Containers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(global::JA.Risk.ContainerReferencesAssets.AssetDomainRoleId);
			}
		}
		#endregion
		#region RiskModel opposite domain role accessor
		/// <summary>
		/// Gets or sets RiskModel.
		/// Description for JA.Risk.RiskModelHasAssets.Asset
		/// </summary>
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Risk.RiskModelHasAssets.AssetDomainRoleId) as RiskModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Risk.RiskModelHasAssets.AssetDomainRoleId, value);
			}
		}
		#endregion
		#region ThreatAgents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ThreatAgents.
		/// Description for JA.Risk.LegitimateAccess.Asset
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ThreatAgent> ThreatAgents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ThreatAgent>, ThreatAgent>(global::JA.Risk.LegitimateAccess.AssetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass ThreatAgent
	/// Represents something active, a user, attacker or external event
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ThreatAgent.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ThreatAgent.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c887e7ce-864d-4c36-a285-170f665ced7b")]
	public partial class ThreatAgent : ObjectWithPorts
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ThreatAgent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc887e7ce, 0x864d, 0x4c36, 0xa2, 0x85, 0x17, 0x0f, 0x66, 0x5c, 0xed, 0x7b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ThreatAgent(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ThreatAgent(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Number domain property code
		
		/// <summary>
		/// Number domain property Id.
		/// </summary>
		public static readonly global::System.Guid NumberDomainPropertyId = new global::System.Guid(0x4dd9846f, 0xa569, 0x4e4a, 0xb6, 0x96, 0xf9, 0xdf, 0xd8, 0xc7, 0x4b, 0x1a);
		
		/// <summary>
		/// Storage for Number
		/// </summary>
		private global::System.String numberPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Number domain property.
		/// The number of instances of this threat
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ThreatAgent/Number.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ThreatAgent/Number.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4dd9846f-a569-4e4a-b696-f9dfd8c74b1a")]
		public global::System.String Number
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return numberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NumberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ThreatAgent.Number domain property.
		/// </summary>
		internal sealed partial class NumberPropertyHandler : DslModeling::DomainPropertyValueHandler<ThreatAgent, global::System.String>
		{
			private NumberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ThreatAgent.Number domain property value handler.
			/// </summary>
			public static readonly NumberPropertyHandler Instance = new NumberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ThreatAgent.Number domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NumberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ThreatAgent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.numberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ThreatAgent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.numberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RiskModel opposite domain role accessor
		/// <summary>
		/// Gets or sets RiskModel.
		/// Description for JA.Risk.RiskModelHasThreatAgents.ThreatAgent
		/// </summary>
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Risk.RiskModelHasThreatAgents.ThreatAgentDomainRoleId) as RiskModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Risk.RiskModelHasThreatAgents.ThreatAgentDomainRoleId, value);
			}
		}
		#endregion
		#region Assets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Assets.
		/// Description for JA.Risk.LegitimateAccess.ThreatAgent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Asset> Assets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(global::JA.Risk.LegitimateAccess.ThreatAgentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass Condition
	/// This represents a condition a threat agent has before connecting to a system.
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Condition.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Condition.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2f960aff-ba36-48d5-8b9e-7cd173502a86")]
	public partial class Condition : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Condition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f960aff, 0xba36, 0x48d5, 0x8b, 0x9e, 0x7c, 0xd1, 0x73, 0x50, 0x2a, 0x86);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Condition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Condition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ObjectWithConditions opposite domain role accessor
		/// <summary>
		/// Gets or sets ObjectWithConditions.
		/// Description for JA.Risk.ObjectWithConditionsHasConditions.Condition
		/// </summary>
		public virtual ObjectWithConditions ObjectWithConditions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::JA.Risk.ObjectWithConditionsHasConditions.ConditionDomainRoleId) as ObjectWithConditions;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::JA.Risk.ObjectWithConditionsHasConditions.ConditionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass ObjectWithConditions
	/// Description for JA.Risk.ObjectWithConditions
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ObjectWithConditions.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ObjectWithConditions.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("17d58e3b-39ed-425b-94e9-764f3aa76897")]
	public abstract partial class ObjectWithConditions : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectWithConditions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x17d58e3b, 0x39ed, 0x425b, 0x94, 0xe9, 0x76, 0x4f, 0x3a, 0xa7, 0x68, 0x97);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ObjectWithConditions(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Conditions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Conditions.
		/// Description for JA.Risk.ObjectWithConditionsHasConditions.ObjectWithConditions
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Condition> Conditions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Condition>, Condition>(global::JA.Risk.ObjectWithConditionsHasConditions.ObjectWithConditionsDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Risk.Condition.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::JA.Risk.Condition sourceCondition1 = sourceElement as global::JA.Risk.Condition;
			if (sourceCondition1 != null)
			{
				// Create link for path ObjectWithConditionsHasConditions.Conditions
				this.Conditions.Add(sourceCondition1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::JA.Risk.Condition sourceCondition1 = sourceElement as global::JA.Risk.Condition;
			if (sourceCondition1 != null)
			{
				// Delete link for path ObjectWithConditionsHasConditions.Conditions
				
				foreach (DslModeling::ElementLink link in global::JA.Risk.ObjectWithConditionsHasConditions.GetLinks((global::JA.Risk.ObjectWithConditions)this, sourceCondition1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Risk.ObjectWithConditionsHasConditions.ObjectWithConditionsDomainRoleId, global::JA.Risk.ObjectWithConditionsHasConditions.ConditionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainClass ObjectWithPorts
	/// Description for JA.Risk.ObjectWithPorts
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ObjectWithPorts.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ObjectWithPorts.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e0fa9b66-207b-4be2-a424-d26097841440")]
	public abstract partial class ObjectWithPorts : ObjectWithConditions
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ObjectWithPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0fa9b66, 0x207b, 0x4be2, 0xa4, 0x24, 0xd2, 0x60, 0x97, 0x84, 0x14, 0x40);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ObjectWithPorts(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InternalFunctions domain property code
		
		/// <summary>
		/// InternalFunctions domain property Id.
		/// </summary>
		public static readonly global::System.Guid InternalFunctionsDomainPropertyId = new global::System.Guid(0xcd227b9c, 0xef08, 0x487c, 0x82, 0xc9, 0x3d, 0x81, 0x46, 0x58, 0x20, 0x54);
		
		/// <summary>
		/// Storage for InternalFunctions
		/// </summary>
		private global::System.String internalFunctionsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InternalFunctions domain property.
		/// This describes the internal functions provided by the container or threat agent,
		/// i.e. how access on one port converts to access on another one.
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ObjectWithPorts/InternalFunctions.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ObjectWithPorts/InternalFunctions.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cd227b9c-ef08-487c-82c9-3d8146582054")]
		public global::System.String InternalFunctions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return internalFunctionsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InternalFunctionsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ObjectWithPorts.InternalFunctions domain property.
		/// </summary>
		internal sealed partial class InternalFunctionsPropertyHandler : DslModeling::DomainPropertyValueHandler<ObjectWithPorts, global::System.String>
		{
			private InternalFunctionsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ObjectWithPorts.InternalFunctions domain property value handler.
			/// </summary>
			public static readonly InternalFunctionsPropertyHandler Instance = new InternalFunctionsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ObjectWithPorts.InternalFunctions domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InternalFunctionsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ObjectWithPorts element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.internalFunctionsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ObjectWithPorts element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.internalFunctionsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Ports opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Ports.
		/// Description for JA.Risk.ObjectHasPorts.ObjectWithPorts
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Port> Ports
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(global::JA.Risk.ObjectHasPorts.ObjectWithPortsDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::JA.Risk.Port.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::JA.Risk.Port sourcePort1 = sourceElement as global::JA.Risk.Port;
			if (sourcePort1 != null)
			{
				// Create link for path ObjectHasPorts.Ports
				this.Ports.Add(sourcePort1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::JA.Risk.Port sourcePort1 = sourceElement as global::JA.Risk.Port;
			if (sourcePort1 != null)
			{
				// Delete link for path ObjectHasPorts.Ports
				
				foreach (DslModeling::ElementLink link in global::JA.Risk.ObjectHasPorts.GetLinks((global::JA.Risk.ObjectWithPorts)this, sourcePort1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::JA.Risk.ObjectHasPorts.ObjectWithPortsDomainRoleId, global::JA.Risk.ObjectHasPorts.PortDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
