//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ContainerHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ContainerHasPorts.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ContainerHasPorts.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6ce9efea-f98d-493e-afd1-bdef14cc726d")]
	public partial class ContainerHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContainerHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ce9efea, 0xf98d, 0x493e, 0xaf, 0xd1, 0xbd, 0xef, 0x14, 0xcc, 0x72, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContainerHasPorts link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public ContainerHasPorts(Container source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContainerHasPorts.ContainerDomainRoleId, source), new DslModeling::RoleAssignment(ContainerHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0xba5b6249, 0x4ee8, 0x4916, 0x90, 0x91, 0xc6, 0xba, 0xff, 0x73, 0x19, 0x67);
		
		/// <summary>
		/// DomainRole Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasPorts/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasPorts/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="JA.Risk.ContainerHasPorts/Container.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba5b6249-4ee8-4916-9091-c6baff731967")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Container of a Port
		/// <summary>
		/// Gets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetContainer(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContainer(Port element, Container newContainer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newContainer);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0xe7978655, 0x4401, 0x4fe7, 0xb6, 0x00, 0xcf, 0xa5, 0x7b, 0x15, 0xe6, 0xf0);
		
		/// <summary>
		/// DomainRole Port
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasPorts/Port.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasPorts/Port.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Container", PropertyDisplayNameKey="JA.Risk.ContainerHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e7978655-4401-4fe7-b600-cfa57b15e6f0")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a Container
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, ContainerDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the list of ContainerHasPorts links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasPorts> GetLinksToPorts ( global::JA.Risk.Container containerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(containerInstance, global::JA.Risk.ContainerHasPorts.ContainerDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the ContainerHasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasPorts GetLinkToContainer (global::JA.Risk.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(portInstance, global::JA.Risk.ContainerHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContainerHasPorts instance accessors
		
		/// <summary>
		/// Get any ContainerHasPorts links between a given Container and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasPorts> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ContainerHasPorts> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ContainerHasPorts>();
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(source, global::JA.Risk.ContainerHasPorts.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContainerHasPorts link between a given Containerand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasPorts GetLink( global::JA.Risk.Container source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(source, global::JA.Risk.ContainerHasPorts.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship RiskModelHasContainers
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("38aa0a41-4dc9-4a81-ab8b-1f71302601ac")]
	public partial class RiskModelHasContainers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RiskModelHasContainers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38aa0a41, 0x4dc9, 0x4a81, 0xab, 0x8b, 0x1f, 0x71, 0x30, 0x26, 0x01, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RiskModelHasContainers link in the same Partition as the given RiskModel
		/// </summary>
		/// <param name="source">RiskModel to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public RiskModelHasContainers(RiskModel source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RiskModelHasContainers.RiskModelDomainRoleId, source), new DslModeling::RoleAssignment(RiskModelHasContainers.ContainerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasContainers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasContainers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasContainers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasContainers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RiskModel domain role code
		
		/// <summary>
		/// RiskModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RiskModelDomainRoleId = new global::System.Guid(0xf35d74fc, 0xe9a3, 0x4cc2, 0xb3, 0x44, 0xcf, 0x08, 0xb7, 0xcd, 0x5a, 0x33);
		
		/// <summary>
		/// DomainRole RiskModel
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers/RiskModel.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers/RiskModel.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Containers", PropertyDisplayNameKey="JA.Risk.RiskModelHasContainers/RiskModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f35d74fc-e9a3-4cc2-b344-cf08b7cd5a33")]
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RiskModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RiskModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RiskModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RiskModel of a Container
		/// <summary>
		/// Gets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RiskModel GetRiskModel(Container element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ContainerDomainRoleId) as RiskModel;
		}
		
		/// <summary>
		/// Sets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRiskModel(Container element, RiskModel newRiskModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ContainerDomainRoleId, newRiskModel);
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0x69d32f76, 0xbd09, 0x493d, 0xb6, 0x4a, 0x6d, 0x54, 0x45, 0x16, 0x07, 0xaa);
		
		/// <summary>
		/// DomainRole Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RiskModel", PropertyDisplayNameKey="JA.Risk.RiskModelHasContainers/Container.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("69d32f76-bd09-493d-b64a-6d54451607aa")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Containers of a RiskModel
		/// <summary>
		/// Gets a list of Containers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetContainers(RiskModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, RiskModelDomainRoleId);
		}
		#endregion
		#region RiskModel link accessor
		/// <summary>
		/// Get the list of RiskModelHasContainers links to a RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasContainers> GetLinksToContainers ( global::JA.Risk.RiskModel riskModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(riskModelInstance, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the RiskModelHasContainers link to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasContainers GetLinkToRiskModel (global::JA.Risk.Container containerInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(containerInstance, global::JA.Risk.RiskModelHasContainers.ContainerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Container not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RiskModelHasContainers instance accessors
		
		/// <summary>
		/// Get any RiskModelHasContainers links between a given RiskModel and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasContainers> GetLinks( global::JA.Risk.RiskModel source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasContainers> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasContainers>();
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(source, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasContainers link in links )
			{
				if ( target.Equals(link.Container) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RiskModelHasContainers link between a given RiskModeland a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasContainers GetLink( global::JA.Risk.RiskModel source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(source, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasContainers link in links )
			{
				if ( target.Equals(link.Container) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship Generalization
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Generalization.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Generalization.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d3f5f36b-85f6-467b-9d59-c9a432c5d0ef")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd3f5f36b, 0x85f6, 0x467b, 0x9d, 0x59, 0xc9, 0xa4, 0x32, 0xc5, 0xd0, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public Generalization(Container source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0xae3526b0, 0x20d6, 0x46dd, 0x9b, 0x36, 0x38, 0x96, 0x0a, 0x68, 0xae, 0xe4);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Generalization/Superclass.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Generalization/Superclass.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="JA.Risk.Generalization/Superclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae3526b0-20d6-46dd-9b36-38960a68aee4")]
		public virtual Container Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a Container
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetSuperclass(Container element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(Container element, Container newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0xe1d115ba, 0x809a, 0x46ab, 0xa0, 0xf9, 0x52, 0x79, 0x2a, 0x12, 0x86, 0xc0);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Generalization/Subclass.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Generalization/Subclass.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="JA.Risk.Generalization/Subclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e1d115ba-809a-46ab-a0f9-52792a1286c0")]
		public virtual Container Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a Container
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetSubclasses(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Generalization> GetLinksToSubclasses ( global::JA.Risk.Container superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(superclassInstance, global::JA.Risk.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Generalization GetLinkToSuperclass (global::JA.Risk.Container subclassInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(subclassInstance, global::JA.Risk.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given Container and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Generalization> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.Generalization> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.Generalization>();
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(source, global::JA.Risk.Generalization.SuperclassDomainRoleId);
			foreach ( global::JA.Risk.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given Containerand a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Generalization GetLink( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(source, global::JA.Risk.Generalization.SuperclassDomainRoleId);
			foreach ( global::JA.Risk.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ContainerHasTargetContainers
	/// Description for JA.Risk.ContainerHasTargetContainers
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ContainerHasTargetContainers.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ContainerHasTargetContainers.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6a4cd38c-4857-4624-884e-9f3b4c4e7be7")]
	public partial class ContainerHasTargetContainers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContainerHasTargetContainers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6a4cd38c, 0x4857, 0x4624, 0x88, 0x4e, 0x9f, 0x3b, 0x4c, 0x4e, 0x7b, 0xe7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContainerHasTargetContainers link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public ContainerHasTargetContainers(Container source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContainerHasTargetContainers.SourceContainerDomainRoleId, source), new DslModeling::RoleAssignment(ContainerHasTargetContainers.TargetContainerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasTargetContainers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasTargetContainers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasTargetContainers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasTargetContainers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceContainer domain role code
		
		/// <summary>
		/// SourceContainer domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceContainerDomainRoleId = new global::System.Guid(0x310367ec, 0x4030, 0x46a9, 0xa7, 0xef, 0xba, 0x83, 0xf9, 0xae, 0x92, 0xed);
		
		/// <summary>
		/// DomainRole SourceContainer
		/// Description for JA.Risk.ContainerHasTargetContainers.SourceContainer
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasTargetContainers/SourceContainer.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasTargetContainers/SourceContainer.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetContainers", PropertyDisplayNameKey="JA.Risk.ContainerHasTargetContainers/SourceContainer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("310367ec-4030-46a9-a7ef-ba83f9ae92ed")]
		public virtual Container SourceContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceContainer of a Container
		/// <summary>
		/// Gets SourceContainer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetSourceContainer(Container element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetContainerDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets SourceContainer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourceContainer(Container element, Container newSourceContainer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetContainerDomainRoleId, newSourceContainer);
		}
		#endregion
		#region TargetContainer domain role code
		
		/// <summary>
		/// TargetContainer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetContainerDomainRoleId = new global::System.Guid(0x7ca1b82c, 0x0642, 0x4bd8, 0xbe, 0x58, 0x53, 0xaa, 0x73, 0xb5, 0x8f, 0xad);
		
		/// <summary>
		/// DomainRole TargetContainer
		/// Description for JA.Risk.ContainerHasTargetContainers.TargetContainer
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasTargetContainers/TargetContainer.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasTargetContainers/TargetContainer.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceContainer", PropertyDisplayNameKey="JA.Risk.ContainerHasTargetContainers/TargetContainer.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7ca1b82c-0642-4bd8-be58-53aa73b58fad")]
		public virtual Container TargetContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetContainers of a Container
		/// <summary>
		/// Gets a list of TargetContainers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetTargetContainers(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, SourceContainerDomainRoleId);
		}
		#endregion
		#region SourceContainer link accessor
		/// <summary>
		/// Get the list of ContainerHasTargetContainers links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasTargetContainers> GetLinksToTargetContainers ( global::JA.Risk.Container sourceContainerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasTargetContainers>(sourceContainerInstance, global::JA.Risk.ContainerHasTargetContainers.SourceContainerDomainRoleId);
		}
		#endregion
		#region TargetContainer link accessor
		/// <summary>
		/// Get the ContainerHasTargetContainers link to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasTargetContainers GetLinkToSourceContainer (global::JA.Risk.Container targetContainerInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasTargetContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasTargetContainers>(targetContainerInstance, global::JA.Risk.ContainerHasTargetContainers.TargetContainerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetContainer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContainerHasTargetContainers instance accessors
		
		/// <summary>
		/// Get any ContainerHasTargetContainers links between a given Container and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasTargetContainers> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ContainerHasTargetContainers> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ContainerHasTargetContainers>();
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasTargetContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasTargetContainers>(source, global::JA.Risk.ContainerHasTargetContainers.SourceContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasTargetContainers link in links )
			{
				if ( target.Equals(link.TargetContainer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContainerHasTargetContainers link between a given Containerand a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasTargetContainers GetLink( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasTargetContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasTargetContainers>(source, global::JA.Risk.ContainerHasTargetContainers.SourceContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasTargetContainers link in links )
			{
				if ( target.Equals(link.TargetContainer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship PortReferencesTargetPorted
	/// Description for JA.Risk.PortReferencesTargetPorted
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.PortReferencesTargetPorted.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.PortReferencesTargetPorted.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ddc2e9e0-da0d-41da-b6f1-709345d0737c")]
	public partial class PortReferencesTargetPorted : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PortReferencesTargetPorted domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xddc2e9e0, 0xda0d, 0x41da, 0xb6, 0xf1, 0x70, 0x93, 0x45, 0xd0, 0x73, 0x7c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PortReferencesTargetPorted link in the same Partition as the given Port
		/// </summary>
		/// <param name="source">Port to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public PortReferencesTargetPorted(Port source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PortReferencesTargetPorted.SourcePortDomainRoleId, source), new DslModeling::RoleAssignment(PortReferencesTargetPorted.TargetPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PortReferencesTargetPorted(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PortReferencesTargetPorted(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PortReferencesTargetPorted(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PortReferencesTargetPorted(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourcePort domain role code
		
		/// <summary>
		/// SourcePort domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourcePortDomainRoleId = new global::System.Guid(0x8ada8518, 0x418f, 0x45ad, 0x9f, 0x27, 0xe6, 0x93, 0x20, 0x48, 0x3e, 0x47);
		
		/// <summary>
		/// DomainRole SourcePort
		/// Description for JA.Risk.PortReferencesTargetPorted.SourcePort
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.PortReferencesTargetPorted/SourcePort.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.PortReferencesTargetPorted/SourcePort.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetPorted", PropertyDisplayNameKey="JA.Risk.PortReferencesTargetPorted/SourcePort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8ada8518-418f-45ad-9f27-e69320483e47")]
		public virtual Port SourcePort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourcePortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourcePortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourcePorted of a Port
		/// <summary>
		/// Gets a list of SourcePorted.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetSourcePorted(Port element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, TargetPortDomainRoleId);
		}
		#endregion
		#region TargetPort domain role code
		
		/// <summary>
		/// TargetPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetPortDomainRoleId = new global::System.Guid(0x279cfe6d, 0x0a18, 0x4abf, 0xaf, 0xb9, 0x04, 0x1c, 0xa3, 0x35, 0x45, 0xa3);
		
		/// <summary>
		/// DomainRole TargetPort
		/// Description for JA.Risk.PortReferencesTargetPorted.TargetPort
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.PortReferencesTargetPorted/TargetPort.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.PortReferencesTargetPorted/TargetPort.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourcePorted", PropertyDisplayNameKey="JA.Risk.PortReferencesTargetPorted/TargetPort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("279cfe6d-0a18-4abf-afb9-041ca33545a3")]
		public virtual Port TargetPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetPorted of a Port
		/// <summary>
		/// Gets a list of TargetPorted.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetTargetPorted(Port element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, SourcePortDomainRoleId);
		}
		#endregion
		#region SourcePort link accessor
		/// <summary>
		/// Get the list of PortReferencesTargetPorted links to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.PortReferencesTargetPorted> GetLinksToTargetPorted ( global::JA.Risk.Port sourcePortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.PortReferencesTargetPorted>(sourcePortInstance, global::JA.Risk.PortReferencesTargetPorted.SourcePortDomainRoleId);
		}
		#endregion
		#region TargetPort link accessor
		/// <summary>
		/// Get the list of PortReferencesTargetPorted links to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.PortReferencesTargetPorted> GetLinksToSourcePorted ( global::JA.Risk.Port targetPortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.PortReferencesTargetPorted>(targetPortInstance, global::JA.Risk.PortReferencesTargetPorted.TargetPortDomainRoleId);
		}
		#endregion
		#region PortReferencesTargetPorted instance accessors
		
		/// <summary>
		/// Get any PortReferencesTargetPorted links between a given Port and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.PortReferencesTargetPorted> GetLinks( global::JA.Risk.Port source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.PortReferencesTargetPorted> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.PortReferencesTargetPorted>();
			global::System.Collections.Generic.IList<global::JA.Risk.PortReferencesTargetPorted> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.PortReferencesTargetPorted>(source, global::JA.Risk.PortReferencesTargetPorted.SourcePortDomainRoleId);
			foreach ( global::JA.Risk.PortReferencesTargetPorted link in links )
			{
				if ( target.Equals(link.TargetPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PortReferencesTargetPorted link between a given Portand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.PortReferencesTargetPorted GetLink( global::JA.Risk.Port source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.PortReferencesTargetPorted> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.PortReferencesTargetPorted>(source, global::JA.Risk.PortReferencesTargetPorted.SourcePortDomainRoleId);
			foreach ( global::JA.Risk.PortReferencesTargetPorted link in links )
			{
				if ( target.Equals(link.TargetPort) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
