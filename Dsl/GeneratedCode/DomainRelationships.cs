//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ContainerHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ContainerHasPorts.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ContainerHasPorts.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6ce9efea-f98d-493e-afd1-bdef14cc726d")]
	public partial class ContainerHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContainerHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ce9efea, 0xf98d, 0x493e, 0xaf, 0xd1, 0xbd, 0xef, 0x14, 0xcc, 0x72, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContainerHasPorts link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public ContainerHasPorts(Container source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContainerHasPorts.ContainerDomainRoleId, source), new DslModeling::RoleAssignment(ContainerHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0xba5b6249, 0x4ee8, 0x4916, 0x90, 0x91, 0xc6, 0xba, 0xff, 0x73, 0x19, 0x67);
		
		/// <summary>
		/// DomainRole Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasPorts/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasPorts/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="JA.Risk.ContainerHasPorts/Container.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba5b6249-4ee8-4916-9091-c6baff731967")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Container of a Port
		/// <summary>
		/// Gets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetContainer(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContainer(Port element, Container newContainer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newContainer);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0xe7978655, 0x4401, 0x4fe7, 0xb6, 0x00, 0xcf, 0xa5, 0x7b, 0x15, 0xe6, 0xf0);
		
		/// <summary>
		/// DomainRole Port
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasPorts/Port.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasPorts/Port.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Container", PropertyDisplayNameKey="JA.Risk.ContainerHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e7978655-4401-4fe7-b600-cfa57b15e6f0")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a Container
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, ContainerDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the list of ContainerHasPorts links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasPorts> GetLinksToPorts ( global::JA.Risk.Container containerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(containerInstance, global::JA.Risk.ContainerHasPorts.ContainerDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the ContainerHasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasPorts GetLinkToContainer (global::JA.Risk.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(portInstance, global::JA.Risk.ContainerHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContainerHasPorts instance accessors
		
		/// <summary>
		/// Get any ContainerHasPorts links between a given Container and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasPorts> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ContainerHasPorts> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ContainerHasPorts>();
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(source, global::JA.Risk.ContainerHasPorts.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContainerHasPorts link between a given Containerand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasPorts GetLink( global::JA.Risk.Container source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasPorts>(source, global::JA.Risk.ContainerHasPorts.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship RiskModelHasContainers
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("38aa0a41-4dc9-4a81-ab8b-1f71302601ac")]
	public partial class RiskModelHasContainers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RiskModelHasContainers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38aa0a41, 0x4dc9, 0x4a81, 0xab, 0x8b, 0x1f, 0x71, 0x30, 0x26, 0x01, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RiskModelHasContainers link in the same Partition as the given RiskModel
		/// </summary>
		/// <param name="source">RiskModel to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public RiskModelHasContainers(RiskModel source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RiskModelHasContainers.RiskModelDomainRoleId, source), new DslModeling::RoleAssignment(RiskModelHasContainers.ContainerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasContainers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasContainers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RiskModelHasContainers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RiskModelHasContainers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RiskModel domain role code
		
		/// <summary>
		/// RiskModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid RiskModelDomainRoleId = new global::System.Guid(0xf35d74fc, 0xe9a3, 0x4cc2, 0xb3, 0x44, 0xcf, 0x08, 0xb7, 0xcd, 0x5a, 0x33);
		
		/// <summary>
		/// DomainRole RiskModel
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers/RiskModel.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers/RiskModel.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Containers", PropertyDisplayNameKey="JA.Risk.RiskModelHasContainers/RiskModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f35d74fc-e9a3-4cc2-b344-cf08b7cd5a33")]
		public virtual RiskModel RiskModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RiskModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, RiskModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RiskModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RiskModel of a Container
		/// <summary>
		/// Gets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static RiskModel GetRiskModel(Container element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ContainerDomainRoleId) as RiskModel;
		}
		
		/// <summary>
		/// Sets RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRiskModel(Container element, RiskModel newRiskModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ContainerDomainRoleId, newRiskModel);
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0x69d32f76, 0xbd09, 0x493d, 0xb6, 0x4a, 0x6d, 0x54, 0x45, 0x16, 0x07, 0xaa);
		
		/// <summary>
		/// DomainRole Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.RiskModelHasContainers/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.RiskModelHasContainers/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RiskModel", PropertyDisplayNameKey="JA.Risk.RiskModelHasContainers/Container.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("69d32f76-bd09-493d-b64a-6d54451607aa")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Containers of a RiskModel
		/// <summary>
		/// Gets a list of Containers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetContainers(RiskModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, RiskModelDomainRoleId);
		}
		#endregion
		#region RiskModel link accessor
		/// <summary>
		/// Get the list of RiskModelHasContainers links to a RiskModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasContainers> GetLinksToContainers ( global::JA.Risk.RiskModel riskModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(riskModelInstance, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the RiskModelHasContainers link to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasContainers GetLinkToRiskModel (global::JA.Risk.Container containerInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(containerInstance, global::JA.Risk.RiskModelHasContainers.ContainerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Container not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RiskModelHasContainers instance accessors
		
		/// <summary>
		/// Get any RiskModelHasContainers links between a given RiskModel and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.RiskModelHasContainers> GetLinks( global::JA.Risk.RiskModel source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasContainers> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.RiskModelHasContainers>();
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(source, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasContainers link in links )
			{
				if ( target.Equals(link.Container) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RiskModelHasContainers link between a given RiskModeland a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.RiskModelHasContainers GetLink( global::JA.Risk.RiskModel source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.RiskModelHasContainers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.RiskModelHasContainers>(source, global::JA.Risk.RiskModelHasContainers.RiskModelDomainRoleId);
			foreach ( global::JA.Risk.RiskModelHasContainers link in links )
			{
				if ( target.Equals(link.Container) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship Generalization
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Generalization.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Generalization.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d3f5f36b-85f6-467b-9d59-c9a432c5d0ef")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd3f5f36b, 0x85f6, 0x467b, 0x9d, 0x59, 0xc9, 0xa4, 0x32, 0xc5, 0xd0, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public Generalization(Container source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0xae3526b0, 0x20d6, 0x46dd, 0x9b, 0x36, 0x38, 0x96, 0x0a, 0x68, 0xae, 0xe4);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Generalization/Superclass.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Generalization/Superclass.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="JA.Risk.Generalization/Superclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae3526b0-20d6-46dd-9b36-38960a68aee4")]
		public virtual Container Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a Container
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetSuperclass(Container element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(Container element, Container newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0xe1d115ba, 0x809a, 0x46ab, 0xa0, 0xf9, 0x52, 0x79, 0x2a, 0x12, 0x86, 0xc0);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Generalization/Subclass.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Generalization/Subclass.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="JA.Risk.Generalization/Subclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e1d115ba-809a-46ab-a0f9-52792a1286c0")]
		public virtual Container Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a Container
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetSubclasses(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Generalization> GetLinksToSubclasses ( global::JA.Risk.Container superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(superclassInstance, global::JA.Risk.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Generalization GetLinkToSuperclass (global::JA.Risk.Container subclassInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(subclassInstance, global::JA.Risk.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given Container and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Generalization> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.Generalization> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.Generalization>();
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(source, global::JA.Risk.Generalization.SuperclassDomainRoleId);
			foreach ( global::JA.Risk.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given Containerand a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Generalization GetLink( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Generalization>(source, global::JA.Risk.Generalization.SuperclassDomainRoleId);
			foreach ( global::JA.Risk.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship Interaction
	/// Description for JA.Risk.Interaction
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Interaction.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Interaction.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("ddc2e9e0-da0d-41da-b6f1-709345d0737c")]
	public partial class Interaction : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Interaction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xddc2e9e0, 0xda0d, 0x41da, 0xb6, 0xf1, 0x70, 0x93, 0x45, 0xd0, 0x73, 0x7c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Interaction link in the same Partition as the given Port
		/// </summary>
		/// <param name="source">Port to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public Interaction(Port source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Interaction.SourcePortDomainRoleId, source), new DslModeling::RoleAssignment(Interaction.TargetPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Interaction(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Interaction(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Interaction(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Interaction(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourcePort domain role code
		
		/// <summary>
		/// SourcePort domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourcePortDomainRoleId = new global::System.Guid(0x8ada8518, 0x418f, 0x45ad, 0x9f, 0x27, 0xe6, 0x93, 0x20, 0x48, 0x3e, 0x47);
		
		/// <summary>
		/// DomainRole SourcePort
		/// Description for JA.Risk.Interaction.SourcePort
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Interaction/SourcePort.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Interaction/SourcePort.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetPort", PropertyDisplayNameKey="JA.Risk.Interaction/SourcePort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8ada8518-418f-45ad-9f27-e69320483e47")]
		public virtual Port SourcePort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourcePortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourcePortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourcePort of a Port
		/// <summary>
		/// Gets a list of SourcePort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetSourcePort(Port element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, TargetPortDomainRoleId);
		}
		#endregion
		#region TargetPort domain role code
		
		/// <summary>
		/// TargetPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetPortDomainRoleId = new global::System.Guid(0x279cfe6d, 0x0a18, 0x4abf, 0xaf, 0xb9, 0x04, 0x1c, 0xa3, 0x35, 0x45, 0xa3);
		
		/// <summary>
		/// DomainRole TargetPort
		/// Description for JA.Risk.Interaction.TargetPort
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Interaction/TargetPort.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Interaction/TargetPort.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourcePort", PropertyDisplayNameKey="JA.Risk.Interaction/TargetPort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("279cfe6d-0a18-4abf-afb9-041ca33545a3")]
		public virtual Port TargetPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetPort of a Port
		/// <summary>
		/// Gets a list of TargetPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetTargetPort(Port element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, SourcePortDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb92f1c8b, 0xaf20, 0x4535, 0x8f, 0x1b, 0xc6, 0xfa, 0x08, 0xeb, 0x4b, 0x57);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for JA.Risk.Interaction.Name
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Interaction/Name.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Interaction/Name.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b92f1c8b-af20-4535-8f1b-c6fa08eb4b57")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Interaction.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Interaction, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Interaction.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Interaction.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Interaction element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Interaction element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourcePort link accessor
		/// <summary>
		/// Get the list of Interaction links to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Interaction> GetLinksToTargetPort ( global::JA.Risk.Port sourcePortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Interaction>(sourcePortInstance, global::JA.Risk.Interaction.SourcePortDomainRoleId);
		}
		#endregion
		#region TargetPort link accessor
		/// <summary>
		/// Get the list of Interaction links to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Interaction> GetLinksToSourcePort ( global::JA.Risk.Port targetPortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Interaction>(targetPortInstance, global::JA.Risk.Interaction.TargetPortDomainRoleId);
		}
		#endregion
		#region Interaction instance accessors
		
		/// <summary>
		/// Get any Interaction links between a given Port and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Interaction> GetLinks( global::JA.Risk.Port source, global::JA.Risk.Port target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.Interaction> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.Interaction>();
			global::System.Collections.Generic.IList<global::JA.Risk.Interaction> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Interaction>(source, global::JA.Risk.Interaction.SourcePortDomainRoleId);
			foreach ( global::JA.Risk.Interaction link in links )
			{
				if ( target.Equals(link.TargetPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ContainerHasAssets
	/// Description for JA.Risk.ContainerHasAssets
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ContainerHasAssets.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ContainerHasAssets.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d1c46760-a413-42f9-adfe-0648a04b9464")]
	public partial class ContainerHasAssets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContainerHasAssets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd1c46760, 0xa413, 0x42f9, 0xad, 0xfe, 0x06, 0x48, 0xa0, 0x4b, 0x94, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContainerHasAssets link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Asset to use as the target of the relationship.</param>
		public ContainerHasAssets(Container source, Asset target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContainerHasAssets.ContainerDomainRoleId, source), new DslModeling::RoleAssignment(ContainerHasAssets.AssetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasAssets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasAssets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasAssets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasAssets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0x48a88ba6, 0xfeb5, 0x4413, 0x98, 0xf0, 0xc6, 0xa6, 0x25, 0x62, 0x14, 0xca);
		
		/// <summary>
		/// DomainRole Container
		/// Description for JA.Risk.ContainerHasAssets.Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasAssets/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasAssets/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Assets", PropertyDisplayNameKey="JA.Risk.ContainerHasAssets/Container.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("48a88ba6-feb5-4413-98f0-c6a6256214ca")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Container of a Asset
		/// <summary>
		/// Gets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetContainer(Asset element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssetDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContainer(Asset element, Container newContainer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssetDomainRoleId, newContainer);
		}
		#endregion
		#region Asset domain role code
		
		/// <summary>
		/// Asset domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssetDomainRoleId = new global::System.Guid(0xaf82d81f, 0xac2b, 0x4602, 0xa0, 0xde, 0x0b, 0xc1, 0xb6, 0x5e, 0x77, 0x7c);
		
		/// <summary>
		/// DomainRole Asset
		/// Description for JA.Risk.ContainerHasAssets.Asset
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasAssets/Asset.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasAssets/Asset.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Container", PropertyDisplayNameKey="JA.Risk.ContainerHasAssets/Asset.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("af82d81f-ac2b-4602-a0de-0bc1b65e777c")]
		public virtual Asset Asset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Asset)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Assets of a Container
		/// <summary>
		/// Gets a list of Assets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Asset> GetAssets(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(element, ContainerDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the list of ContainerHasAssets links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasAssets> GetLinksToAssets ( global::JA.Risk.Container containerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAssets>(containerInstance, global::JA.Risk.ContainerHasAssets.ContainerDomainRoleId);
		}
		#endregion
		#region Asset link accessor
		/// <summary>
		/// Get the ContainerHasAssets link to a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasAssets GetLinkToContainer (global::JA.Risk.Asset assetInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAssets>(assetInstance, global::JA.Risk.ContainerHasAssets.AssetDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Asset not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContainerHasAssets instance accessors
		
		/// <summary>
		/// Get any ContainerHasAssets links between a given Container and a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasAssets> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ContainerHasAssets> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ContainerHasAssets>();
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAssets>(source, global::JA.Risk.ContainerHasAssets.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContainerHasAssets link between a given Containerand a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasAssets GetLink( global::JA.Risk.Container source, global::JA.Risk.Asset target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAssets>(source, global::JA.Risk.ContainerHasAssets.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship ContainerHasAgents
	/// Description for JA.Risk.ContainerHasAgents
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.ContainerHasAgents.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.ContainerHasAgents.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f73ad41a-0e8a-41bd-81ab-020155550f1f")]
	public partial class ContainerHasAgents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContainerHasAgents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf73ad41a, 0x0e8a, 0x41bd, 0x81, 0xab, 0x02, 0x01, 0x55, 0x55, 0x0f, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContainerHasAgents link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">ThreatAgent to use as the target of the relationship.</param>
		public ContainerHasAgents(Container source, ThreatAgent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContainerHasAgents.ContainerDomainRoleId, source), new DslModeling::RoleAssignment(ContainerHasAgents.ThreatAgentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasAgents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasAgents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContainerHasAgents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContainerHasAgents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Container domain role code
		
		/// <summary>
		/// Container domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContainerDomainRoleId = new global::System.Guid(0x5c867e0f, 0x6f4d, 0x4a85, 0x9b, 0xe3, 0xa1, 0xa0, 0xd0, 0x3c, 0xca, 0xfa);
		
		/// <summary>
		/// DomainRole Container
		/// Description for JA.Risk.ContainerHasAgents.Container
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasAgents/Container.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasAgents/Container.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ThreatAgents", PropertyDisplayNameKey="JA.Risk.ContainerHasAgents/Container.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5c867e0f-6f4d-4a85-9be3-a1a0d03ccafa")]
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Container of a ThreatAgent
		/// <summary>
		/// Gets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Container GetContainer(ThreatAgent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ThreatAgentDomainRoleId) as Container;
		}
		
		/// <summary>
		/// Sets Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContainer(ThreatAgent element, Container newContainer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ThreatAgentDomainRoleId, newContainer);
		}
		#endregion
		#region ThreatAgent domain role code
		
		/// <summary>
		/// ThreatAgent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ThreatAgentDomainRoleId = new global::System.Guid(0x161e1f99, 0x7035, 0x4b52, 0xb1, 0xe2, 0x26, 0x3d, 0x31, 0xbc, 0x3f, 0x95);
		
		/// <summary>
		/// DomainRole ThreatAgent
		/// Description for JA.Risk.ContainerHasAgents.ThreatAgent
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.ContainerHasAgents/ThreatAgent.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.ContainerHasAgents/ThreatAgent.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Container", PropertyDisplayNameKey="JA.Risk.ContainerHasAgents/ThreatAgent.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("161e1f99-7035-4b52-b1e2-263d31bc3f95")]
		public virtual ThreatAgent ThreatAgent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ThreatAgent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ThreatAgentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ThreatAgentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ThreatAgents of a Container
		/// <summary>
		/// Gets a list of ThreatAgents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ThreatAgent> GetThreatAgents(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ThreatAgent>, ThreatAgent>(element, ContainerDomainRoleId);
		}
		#endregion
		#region Container link accessor
		/// <summary>
		/// Get the list of ContainerHasAgents links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasAgents> GetLinksToThreatAgents ( global::JA.Risk.Container containerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAgents>(containerInstance, global::JA.Risk.ContainerHasAgents.ContainerDomainRoleId);
		}
		#endregion
		#region ThreatAgent link accessor
		/// <summary>
		/// Get the ContainerHasAgents link to a ThreatAgent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasAgents GetLinkToContainer (global::JA.Risk.ThreatAgent threatAgentInstance)
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasAgents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAgents>(threatAgentInstance, global::JA.Risk.ContainerHasAgents.ThreatAgentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ThreatAgent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContainerHasAgents instance accessors
		
		/// <summary>
		/// Get any ContainerHasAgents links between a given Container and a ThreatAgent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.ContainerHasAgents> GetLinks( global::JA.Risk.Container source, global::JA.Risk.ThreatAgent target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.ContainerHasAgents> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.ContainerHasAgents>();
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasAgents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAgents>(source, global::JA.Risk.ContainerHasAgents.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasAgents link in links )
			{
				if ( target.Equals(link.ThreatAgent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContainerHasAgents link between a given Containerand a ThreatAgent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.ContainerHasAgents GetLink( global::JA.Risk.Container source, global::JA.Risk.ThreatAgent target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.ContainerHasAgents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.ContainerHasAgents>(source, global::JA.Risk.ContainerHasAgents.ContainerDomainRoleId);
			foreach ( global::JA.Risk.ContainerHasAgents link in links )
			{
				if ( target.Equals(link.ThreatAgent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace JA.Risk
{
	/// <summary>
	/// DomainRelationship Contains
	/// Description for JA.Risk.Contains
	/// </summary>
	[DslDesign::DisplayNameResource("JA.Risk.Contains.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("JA.Risk.Contains.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::JA.Risk.RiskDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("48911222-c25b-409b-b5be-86345561a3f1")]
	public partial class Contains : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Contains domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48911222, 0xc25b, 0x409b, 0xb5, 0xbe, 0x86, 0x34, 0x55, 0x61, 0xa3, 0xf1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Contains link in the same Partition as the given Container
		/// </summary>
		/// <param name="source">Container to use as the source of the relationship.</param>
		/// <param name="target">Container to use as the target of the relationship.</param>
		public Contains(Container source, Container target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Contains.SourceContainerDomainRoleId, source), new DslModeling::RoleAssignment(Contains.TargetContainerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Contains(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Contains(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Contains(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Contains(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceContainer domain role code
		
		/// <summary>
		/// SourceContainer domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceContainerDomainRoleId = new global::System.Guid(0x08ee4421, 0xb90f, 0x44e3, 0xac, 0x07, 0x40, 0xdf, 0x44, 0xd4, 0x99, 0x93);
		
		/// <summary>
		/// DomainRole SourceContainer
		/// Description for JA.Risk.Contains.SourceContainer
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Contains/SourceContainer.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Contains/SourceContainer.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetContainers", PropertyDisplayNameKey="JA.Risk.Contains/SourceContainer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("08ee4421-b90f-44e3-ac07-40df44d49993")]
		public virtual Container SourceContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceContainers of a Container
		/// <summary>
		/// Gets a list of SourceContainers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetSourceContainers(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, TargetContainerDomainRoleId);
		}
		#endregion
		#region TargetContainer domain role code
		
		/// <summary>
		/// TargetContainer domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetContainerDomainRoleId = new global::System.Guid(0xbe2a2a49, 0xe692, 0x4b51, 0xbc, 0x50, 0x21, 0x17, 0x57, 0x9b, 0xd5, 0x3a);
		
		/// <summary>
		/// DomainRole TargetContainer
		/// Description for JA.Risk.Contains.TargetContainer
		/// </summary>
		[DslDesign::DisplayNameResource("JA.Risk.Contains/TargetContainer.DisplayName", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("JA.Risk.Contains/TargetContainer.Description", typeof(global::JA.Risk.RiskDomainModel), "JA.Risk.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceContainers", PropertyDisplayNameKey="JA.Risk.Contains/TargetContainer.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("be2a2a49-e692-4b51-bc50-2117579bd53a")]
		public virtual Container TargetContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Container)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetContainerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetContainerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetContainers of a Container
		/// <summary>
		/// Gets a list of TargetContainers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Container> GetTargetContainers(Container element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Container>, Container>(element, SourceContainerDomainRoleId);
		}
		#endregion
		#region SourceContainer link accessor
		/// <summary>
		/// Get the list of Contains links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Contains> GetLinksToTargetContainers ( global::JA.Risk.Container sourceContainerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(sourceContainerInstance, global::JA.Risk.Contains.SourceContainerDomainRoleId);
		}
		#endregion
		#region TargetContainer link accessor
		/// <summary>
		/// Get the list of Contains links to a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Contains> GetLinksToSourceContainers ( global::JA.Risk.Container targetContainerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(targetContainerInstance, global::JA.Risk.Contains.TargetContainerDomainRoleId);
		}
		#endregion
		#region Contains instance accessors
		
		/// <summary>
		/// Get any Contains links between a given Container and a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::JA.Risk.Contains> GetLinks( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.List<global::JA.Risk.Contains> outLinks = new global::System.Collections.Generic.List<global::JA.Risk.Contains>();
			global::System.Collections.Generic.IList<global::JA.Risk.Contains> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(source, global::JA.Risk.Contains.SourceContainerDomainRoleId);
			foreach ( global::JA.Risk.Contains link in links )
			{
				if ( target.Equals(link.TargetContainer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Contains link between a given Containerand a Container.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::JA.Risk.Contains GetLink( global::JA.Risk.Container source, global::JA.Risk.Container target )
		{
			global::System.Collections.Generic.IList<global::JA.Risk.Contains> links = DslModeling::DomainRoleInfo.GetElementLinks<global::JA.Risk.Contains>(source, global::JA.Risk.Contains.SourceContainerDomainRoleId);
			foreach ( global::JA.Risk.Contains link in links )
			{
				if ( target.Equals(link.TargetContainer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
